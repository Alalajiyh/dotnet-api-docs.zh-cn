<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4a6dfed614898ce50b46f729d3a136cd26d01633" /><Meta Name="ms.sourcegitcommit" Value="9a6da88bd5455e8274257ca7ad259b42f1de114f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/22/2019" /><Meta Name="ms.locfileid" Value="66007053" /></Metadata><TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <TypeSignature Language="F#" Value="type Information = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="08ea2-101"><see langword="Information" /> 模块包含用于返回、测试或验证信息的过程。</span><span class="sxs-lookup"><span data-stu-id="08ea2-101">The <see langword="Information" /> module contains the procedures used to return, test for, or verify information.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08ea2-102">此模块支持的 Visual Basic 语言关键字和运行时库成员，它们提供的错误信息、 验证数据、 确定数组边界和检索数据类型和颜色信息。</span><span class="sxs-lookup"><span data-stu-id="08ea2-102">This module supports the Visual Basic language keywords and run-time library members that provide error information, validate data, determine array bounds, and retrieve data type and color information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08ea2-103">下面的示例使用`VbTypeName`函数以返回数据的多个变量的类型名称。</span><span class="sxs-lookup"><span data-stu-id="08ea2-103">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/information-and-interaction-summary.md"><span data-ttu-id="08ea2-104">信息和交互摘要</span><span class="sxs-lookup"><span data-stu-id="08ea2-104">Information and Interaction Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/data-types-summary.md"><span data-ttu-id="08ea2-105">Data Types Summary</span><span class="sxs-lookup"><span data-stu-id="08ea2-105">Data Types Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/declarations-and-constants-summary.md"><span data-ttu-id="08ea2-106">声明和常量摘要</span><span class="sxs-lookup"><span data-stu-id="08ea2-106">Declarations and Constants Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="08ea2-107">关键字 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="08ea2-107">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="08ea2-108">Visual Basic 运行时库成员</span><span class="sxs-lookup"><span data-stu-id="08ea2-108">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberSignature Language="F#" Value="static member Erl : unit -&gt; int" Usage="Microsoft.VisualBasic.Information.Erl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08ea2-109">返回指示上一条执行语句的行号的整数。</span><span class="sxs-lookup"><span data-stu-id="08ea2-109">Returns an integer indicating the line number of the last executed statement.</span></span> <span data-ttu-id="08ea2-110">只读。</span><span class="sxs-lookup"><span data-stu-id="08ea2-110">Read-only.</span></span></summary>
        <returns><span data-ttu-id="08ea2-111">返回指示上一条执行语句的行号的整数。</span><span class="sxs-lookup"><span data-stu-id="08ea2-111">Returns an integer indicating the line number of the last executed statement.</span></span> <span data-ttu-id="08ea2-112">只读。</span><span class="sxs-lookup"><span data-stu-id="08ea2-112">Read-only.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08ea2-113">如果 Visual Basic 遇到无行号，则返回 0。</span><span class="sxs-lookup"><span data-stu-id="08ea2-113">If Visual Basic encounters no line numbers, it returns 0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08ea2-114">此示例使用`Erl`属性以指示的行号。</span><span class="sxs-lookup"><span data-stu-id="08ea2-114">This example uses the `Erl` property to indicate the line number.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberSignature Language="F#" Value="static member Err : unit -&gt; Microsoft.VisualBasic.ErrObject" Usage="Microsoft.VisualBasic.Information.Err " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08ea2-115">包含运行时错误的相关信息。</span><span class="sxs-lookup"><span data-stu-id="08ea2-115">Contains information about run-time errors.</span></span></summary>
        <returns><span data-ttu-id="08ea2-116">包含运行时错误的相关信息。</span><span class="sxs-lookup"><span data-stu-id="08ea2-116">Contains information about run-time errors.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08ea2-117">属性`Err`对象设置错误的 Visual Basic、 一个对象或程序员的生成器。</span><span class="sxs-lookup"><span data-stu-id="08ea2-117">The properties of the `Err` object are set by the generator of an error - Visual Basic, an object, or the programmer.</span></span>  
  
 <span data-ttu-id="08ea2-118">运行时错误发生时，属性的`Err`对象的唯一标识错误的信息填充，并可用于处理错误。</span><span class="sxs-lookup"><span data-stu-id="08ea2-118">When a run-time error occurs, the properties of the `Err` object are filled with information that uniquely identifies the error and that you can use to handle the error.</span></span> <span data-ttu-id="08ea2-119">若要在代码中生成运行时错误，请使用`Raise`方法。</span><span class="sxs-lookup"><span data-stu-id="08ea2-119">To generate a run-time error in your code, use the `Raise` method.</span></span>  
  
 <span data-ttu-id="08ea2-120">`Err`对象的属性将重置为零个或零长度字符串 ("") 后`Exit Sub`， `Exit Function`， `Exit Property`，或`Resume Next`错误处理例程中的语句。</span><span class="sxs-lookup"><span data-stu-id="08ea2-120">The `Err` object's properties are reset to zero or zero-length strings ("") after an `Exit Sub`, `Exit Function`, `Exit Property`, or `Resume Next` statement within an error-handling routine.</span></span> <span data-ttu-id="08ea2-121">使用的任何窗体`Resume`之外的错误处理例程的语句将不会重置`Err`对象的属性。</span><span class="sxs-lookup"><span data-stu-id="08ea2-121">Using any form of the `Resume` statement outside of an error-handling routine will not reset the `Err` object's properties.</span></span> <span data-ttu-id="08ea2-122">可以使用`Clear`方法来显式重置`Err`。</span><span class="sxs-lookup"><span data-stu-id="08ea2-122">You can use the `Clear` method to explicitly reset `Err`.</span></span>  
  
 <span data-ttu-id="08ea2-123">使用`Raise`方法而不是`Error`语句产生运行时错误的系统错误和类模块。</span><span class="sxs-lookup"><span data-stu-id="08ea2-123">Use the `Raise` method rather than the `Error` statement to generate run-time errors for system errors and class modules.</span></span> <span data-ttu-id="08ea2-124">您决定是否使用`Raise`中其他代码的方法取决于你想要返回的信息的丰富功能。</span><span class="sxs-lookup"><span data-stu-id="08ea2-124">Your decision about whether to use the `Raise` method in other code depends on the richness of the information you want to return.</span></span>  
  
 <span data-ttu-id="08ea2-125">`Err`对象是具有全局作用域的内部对象。</span><span class="sxs-lookup"><span data-stu-id="08ea2-125">The `Err` object is an intrinsic object with global scope.</span></span> <span data-ttu-id="08ea2-126">因此，不需要在代码中创建它的一个实例。</span><span class="sxs-lookup"><span data-stu-id="08ea2-126">Therefore, you do not need to create an instance of it in your code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08ea2-127">此示例使用的属性`Err`构造一个错误消息对话框中的对象。</span><span class="sxs-lookup"><span data-stu-id="08ea2-127">This example uses the properties of the `Err` object in constructing an error-message dialog box.</span></span> <span data-ttu-id="08ea2-128">请注意，如果您使用`Clear`方法首先，当您生成与 Visual Basic 错误`Raise`方法中，Visual Basic 的默认值将成为属性的`Err`对象。</span><span class="sxs-lookup"><span data-stu-id="08ea2-128">Notice that if you use the `Clear` method first, when you generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md"><span data-ttu-id="08ea2-129">Error 语句</span><span class="sxs-lookup"><span data-stu-id="08ea2-129">Error Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md"><span data-ttu-id="08ea2-130">On Error 语句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="08ea2-130">On Error Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/exit-statement.md"><span data-ttu-id="08ea2-131">Exit 语句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="08ea2-131">Exit Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/resume-statement.md"><span data-ttu-id="08ea2-132">Resume 语句</span><span class="sxs-lookup"><span data-stu-id="08ea2-132">Resume Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/error-messages/index.md"><span data-ttu-id="08ea2-133">错误消息 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="08ea2-133">Error Messages (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md"><span data-ttu-id="08ea2-134">Try...Catch...Finally 语句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="08ea2-134">Try...Catch...Finally Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member IsArray : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsArray VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="08ea2-135">必需。</span><span class="sxs-lookup"><span data-stu-id="08ea2-135">Required.</span></span> <span data-ttu-id="08ea2-136"><see langword="Object" /> 变量。</span><span class="sxs-lookup"><span data-stu-id="08ea2-136"><see langword="Object" /> variable.</span></span></param>
        <summary><span data-ttu-id="08ea2-137">返回一个 <see langword="Boolean" /> 值，指示变量是否指向数组。</span><span class="sxs-lookup"><span data-stu-id="08ea2-137">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span></span></summary>
        <returns><span data-ttu-id="08ea2-138">返回一个 <see langword="Boolean" /> 值，指示变量是否指向数组。</span><span class="sxs-lookup"><span data-stu-id="08ea2-138">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08ea2-139">`IsArray` 返回`True`如果该变量指向的数组; 否则，它将返回`False`。</span><span class="sxs-lookup"><span data-stu-id="08ea2-139">`IsArray` returns `True` if the variable points to an array; otherwise, it returns `False`.</span></span> <span data-ttu-id="08ea2-140">`IsArray` 是使用可能包含数组的对象特别有用。</span><span class="sxs-lookup"><span data-stu-id="08ea2-140">`IsArray` is especially useful with objects that might contain arrays.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08ea2-141">此示例使用`IsArray`函数来检查多个变量是否引用数组。</span><span class="sxs-lookup"><span data-stu-id="08ea2-141">This example uses the `IsArray` function to check if several variables refer to an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/arrays/index.md"><span data-ttu-id="08ea2-142">Visual Basic 中的数组</span><span class="sxs-lookup"><span data-stu-id="08ea2-142">Arrays in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDate : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDate Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="08ea2-143">必需。</span><span class="sxs-lookup"><span data-stu-id="08ea2-143">Required.</span></span> <span data-ttu-id="08ea2-144"><see langword="Object" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="08ea2-144"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="08ea2-145">返回一个 <see langword="Boolean" /> 值，该值指示表达式是否表示一个有效的 <see langword="Date" /> 值。</span><span class="sxs-lookup"><span data-stu-id="08ea2-145">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span></span></summary>
        <returns><span data-ttu-id="08ea2-146">返回一个 <see langword="Boolean" /> 值，该值指示表达式是否表示一个有效的 <see langword="Date" /> 值。</span><span class="sxs-lookup"><span data-stu-id="08ea2-146">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08ea2-147">`IsDate` 返回`True`如果`Expression`属于<xref:System.DateTime>数据类型或可以转换为它; 否则为它将返回`False`。</span><span class="sxs-lookup"><span data-stu-id="08ea2-147">`IsDate` returns `True` if `Expression` is of the <xref:System.DateTime> data type or can be converted to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="08ea2-148"><xref:System.DateTime>数据类型保存日期值和时间值。</span><span class="sxs-lookup"><span data-stu-id="08ea2-148">The <xref:System.DateTime> data type holds both a date value and a time value.</span></span> <span data-ttu-id="08ea2-149">`IsDate` 返回`True`如果`Expression`表示有效的日期、 有效的时间，或有效的日期和时间。</span><span class="sxs-lookup"><span data-stu-id="08ea2-149">`IsDate` returns `True` if `Expression` represents a valid date, a valid time, or a valid date and time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08ea2-150">下面的示例使用`IsDate`函数来确定多个变量表示有效<xref:System.DateTime>值。</span><span class="sxs-lookup"><span data-stu-id="08ea2-150">The following example uses the `IsDate` function to determine if several variables represent valid <xref:System.DateTime> values.</span></span>  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 <span data-ttu-id="08ea2-151">在前面的示例中，`IsDate`将返回`True`的前四个调用和`False`的最后一个调用。</span><span class="sxs-lookup"><span data-stu-id="08ea2-151">In the preceding example, `IsDate` returns `True` for the first four calls and `False` for the last call.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDBNull Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="08ea2-152">必需。</span><span class="sxs-lookup"><span data-stu-id="08ea2-152">Required.</span></span> <span data-ttu-id="08ea2-153"><see langword="Object" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="08ea2-153"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="08ea2-154">返回一个 <see langword="Boolean" /> 值，指示表达式的计算结果是否为 <see cref="T:System.DBNull" /> 类。</span><span class="sxs-lookup"><span data-stu-id="08ea2-154">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span></span></summary>
        <returns><span data-ttu-id="08ea2-155">返回一个 <see langword="Boolean" /> 值，指示表达式的计算结果是否为 <see cref="T:System.DBNull" /> 类。</span><span class="sxs-lookup"><span data-stu-id="08ea2-155">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08ea2-156">`IsDBNull` 返回`True`的数据类型的`Expression`的计算结果为<xref:System.DBNull>类型; 否则为`IsDBNull`返回`False`。</span><span class="sxs-lookup"><span data-stu-id="08ea2-156">`IsDBNull` returns `True` if the data type of `Expression` evaluates to the <xref:System.DBNull> type; otherwise, `IsDBNull` returns `False`.</span></span>  
  
 <span data-ttu-id="08ea2-157"><xref:System.DBNull?displayProperty=nameWithType>值，该值指示`Object`表示缺失或不存在的数据。</span><span class="sxs-lookup"><span data-stu-id="08ea2-157">The <xref:System.DBNull?displayProperty=nameWithType> value indicates that the `Object` represents missing or nonexistent data.</span></span> <span data-ttu-id="08ea2-158">`DBNull` 不是与相同`Nothing`，指示变量尚未初始化。</span><span class="sxs-lookup"><span data-stu-id="08ea2-158">`DBNull` is not the same as `Nothing`, which indicates that a variable has not yet been initialized.</span></span> <span data-ttu-id="08ea2-159">`DBNull` 此外不是一个零长度字符串相同 (`""`)，这有时称为 null 字符串。</span><span class="sxs-lookup"><span data-stu-id="08ea2-159">`DBNull` is also not the same as a zero-length string (`""`), which is sometimes referred to as a null string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08ea2-160">此示例使用`IsDBNull`函数来确定变量计算结果为`DBNull`。</span><span class="sxs-lookup"><span data-stu-id="08ea2-160">This example uses the `IsDBNull` function to determine if a variable evaluates to `DBNull`.</span></span>  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsError : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsError Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="08ea2-161">必需。</span><span class="sxs-lookup"><span data-stu-id="08ea2-161">Required.</span></span> <span data-ttu-id="08ea2-162"><see langword="Object" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="08ea2-162"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="08ea2-163">返回一个 <see langword="Boolean" /> 值，指示表达式是否是异常类型。</span><span class="sxs-lookup"><span data-stu-id="08ea2-163">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span></span></summary>
        <returns><span data-ttu-id="08ea2-164">返回一个 <see langword="Boolean" /> 值，指示表达式是否是异常类型。</span><span class="sxs-lookup"><span data-stu-id="08ea2-164">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08ea2-165">`IsError` 返回`True`如果表达式表示`Object`派生的变量<xref:System.Exception>类中<xref:System>命名空间。</span><span class="sxs-lookup"><span data-stu-id="08ea2-165">`IsError` returns `True` if the expression represents an `Object` variable that derives from the <xref:System.Exception> class in the <xref:System> namespace.</span></span>  
  
 <span data-ttu-id="08ea2-166">派生的异常<xref:System.Exception?displayProperty=nameWithType>可以通过捕获`Try...Catch...Finally`语句。</span><span class="sxs-lookup"><span data-stu-id="08ea2-166">An exception that derives from <xref:System.Exception?displayProperty=nameWithType> can be caught with the `Try...Catch...Finally` statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08ea2-167">下面的示例使用`IsError`函数来检查表达式是否表示系统异常。</span><span class="sxs-lookup"><span data-stu-id="08ea2-167">The following example uses the `IsError` function to check if an expression represents a system exception.</span></span>  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNothing : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNothing Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="08ea2-168">必需。</span><span class="sxs-lookup"><span data-stu-id="08ea2-168">Required.</span></span> <span data-ttu-id="08ea2-169"><see langword="Object" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="08ea2-169"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="08ea2-170">返回一个 <see langword="Boolean" /> 值，指示表达式是否未被指派对象。</span><span class="sxs-lookup"><span data-stu-id="08ea2-170">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span></span></summary>
        <returns><span data-ttu-id="08ea2-171">返回一个 <see langword="Boolean" /> 值，指示表达式是否未被指派对象。</span><span class="sxs-lookup"><span data-stu-id="08ea2-171">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08ea2-172">`IsNothing` 返回`True`如果表达式表示当前对象分配给它; 否则为没有的对象变量，它将返回`False`。</span><span class="sxs-lookup"><span data-stu-id="08ea2-172">`IsNothing` returns `True` if the expression represents an object variable that currently has no object assigned to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="08ea2-173">`IsNothing` 被应作用于引用类型。</span><span class="sxs-lookup"><span data-stu-id="08ea2-173">`IsNothing` is intended to work on reference types.</span></span> <span data-ttu-id="08ea2-174">值类型不能保存的值[Nothing](~/docs/visual-basic/language-reference/nothing.md)还原为其默认值，如果您分配和`Nothing`到它。</span><span class="sxs-lookup"><span data-stu-id="08ea2-174">A value type cannot hold a value of [Nothing](~/docs/visual-basic/language-reference/nothing.md) and reverts to its default value if you assign `Nothing` to it.</span></span> <span data-ttu-id="08ea2-175">如果您提供了中的值类型`Expression`，`IsNothing`始终返回`False`。</span><span class="sxs-lookup"><span data-stu-id="08ea2-175">If you supply a value type in `Expression`, `IsNothing` always returns `False`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08ea2-176">下面的示例使用`IsNothing`函数来确定对象变量是否与任何对象实例相关联。</span><span class="sxs-lookup"><span data-stu-id="08ea2-176">The following example uses the `IsNothing` function to determine if an object variable is associated with any object instance.</span></span>  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md"><span data-ttu-id="08ea2-177">Value Types and Reference Types</span><span class="sxs-lookup"><span data-stu-id="08ea2-177">Value Types and Reference Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNumeric : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNumeric Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="08ea2-178">必需。</span><span class="sxs-lookup"><span data-stu-id="08ea2-178">Required.</span></span> <span data-ttu-id="08ea2-179"><see langword="Object" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="08ea2-179"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="08ea2-180">返回一个 <see langword="Boolean" /> 值，指示表达式的计算结果是否为数字。</span><span class="sxs-lookup"><span data-stu-id="08ea2-180">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span></span></summary>
        <returns><span data-ttu-id="08ea2-181">返回一个 <see langword="Boolean" /> 值，指示表达式的计算结果是否为数字。</span><span class="sxs-lookup"><span data-stu-id="08ea2-181">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08ea2-182">`IsNumeric` 返回`True`的数据类型的`Expression`是`Boolean`， `Byte`， `Decimal`， `Double`， `Integer`， `Long`， `SByte`， `Short`， `Single`， `UInteger`，`ULong`，或`UShort`。</span><span class="sxs-lookup"><span data-stu-id="08ea2-182">`IsNumeric` returns `True` if the data type of `Expression` is `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, or `UShort`.</span></span> <span data-ttu-id="08ea2-183">它还会返回`True`如果`Expression`是`Char`， `String`，或`Object`可以成功转换为数字。</span><span class="sxs-lookup"><span data-stu-id="08ea2-183">It also returns `True` if `Expression` is a `Char`, `String`, or `Object` that can be successfully converted to a number.</span></span> <span data-ttu-id="08ea2-184">`Expression` 可以包含非数字字符。</span><span class="sxs-lookup"><span data-stu-id="08ea2-184">`Expression` can contain non-numeric characters.</span></span> <span data-ttu-id="08ea2-185">`IsNumeric` 返回`True`如果`Expression`是包含有效的十六进制或八进制数字的字符串。</span><span class="sxs-lookup"><span data-stu-id="08ea2-185">`IsNumeric` returns `True` if `Expression` is a string that contains a valid hexadecimal or octal number.</span></span> <span data-ttu-id="08ea2-186">`IsNumeric` 也会返回`True`如果`Expression`包含开头的有效数值表达式 +、-字符或包含逗号。</span><span class="sxs-lookup"><span data-stu-id="08ea2-186">`IsNumeric` also returns `True` if `Expression` contains a valid numeric expression that begins with a + or - character or contains commas.</span></span>  
  
 <span data-ttu-id="08ea2-187">`IsNumeric` 返回`False`如果`Expression`的数据类型`Date`。</span><span class="sxs-lookup"><span data-stu-id="08ea2-187">`IsNumeric` returns `False` if `Expression` is of data type `Date`.</span></span> <span data-ttu-id="08ea2-188">它将返回`False`如果`Expression`是`Char`， `String`，或`Object`无法成功转换为数字。</span><span class="sxs-lookup"><span data-stu-id="08ea2-188">It returns `False` if `Expression` is a `Char`, `String`, or `Object` that cannot be successfully converted to a number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08ea2-189">下面的示例使用`IsNumeric`函数来确定是否可以作为数字计算变量的内容。</span><span class="sxs-lookup"><span data-stu-id="08ea2-189">The following example uses the `IsNumeric` function to determine if the contents of a variable can be evaluated as a number.</span></span>  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsReference : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsReference Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="08ea2-190">必需。</span><span class="sxs-lookup"><span data-stu-id="08ea2-190">Required.</span></span> <span data-ttu-id="08ea2-191"><see langword="Object" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="08ea2-191"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="08ea2-192">返回一个 <see langword="Boolean" /> 值，指示表达式是否为引用类型。</span><span class="sxs-lookup"><span data-stu-id="08ea2-192">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span></span></summary>
        <returns><span data-ttu-id="08ea2-193">返回一个 <see langword="Boolean" /> 值，指示表达式是否为引用类型。</span><span class="sxs-lookup"><span data-stu-id="08ea2-193">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08ea2-194">`IsReference` 返回`True`如果`Expression`表示引用类型，如类实例，`String`类型或数组的任何类型; 否则，它将返回`False`。</span><span class="sxs-lookup"><span data-stu-id="08ea2-194">`IsReference` returns `True` if `Expression` represents a reference type, such as a class instance, a `String` type, or an array of any type; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="08ea2-195">引用类型包含指向其他位置存储在内存中数据的指针。</span><span class="sxs-lookup"><span data-stu-id="08ea2-195">A reference type contains a pointer to data stored elsewhere in memory.</span></span> <span data-ttu-id="08ea2-196">值类型包含其自己的数据。</span><span class="sxs-lookup"><span data-stu-id="08ea2-196">A value type contains its own data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08ea2-197">此示例使用`IsReference`函数来检查是否多个变量，请参阅为引用类型。</span><span class="sxs-lookup"><span data-stu-id="08ea2-197">This example uses the `IsReference` function to check if several variables refer to reference types.</span></span>  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 <span data-ttu-id="08ea2-198">在前面的示例中前, 三个调用`IsReference`返回`True`。</span><span class="sxs-lookup"><span data-stu-id="08ea2-198">In the preceding example, the first three calls to `IsReference` return `True`.</span></span> <span data-ttu-id="08ea2-199">最后一次调用返回`False`，这是因为`Integer`是值类型，而不是引用类型。</span><span class="sxs-lookup"><span data-stu-id="08ea2-199">The last call returns `False`, because `Integer` is a value type, not a reference type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md"><span data-ttu-id="08ea2-200">Value Types and Reference Types</span><span class="sxs-lookup"><span data-stu-id="08ea2-200">Value Types and Reference Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member LBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.LBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array"><span data-ttu-id="08ea2-201">必需。</span><span class="sxs-lookup"><span data-stu-id="08ea2-201">Required.</span></span> <span data-ttu-id="08ea2-202">任何数据类型的数组。</span><span class="sxs-lookup"><span data-stu-id="08ea2-202">Array of any data type.</span></span> <span data-ttu-id="08ea2-203">希望在其中找到维度的最小可能下标的数组。</span><span class="sxs-lookup"><span data-stu-id="08ea2-203">The array in which you want to find the lowest possible subscript of a dimension.</span></span></param>
        <param name="Rank"><span data-ttu-id="08ea2-204">可选。</span><span class="sxs-lookup"><span data-stu-id="08ea2-204">Optional.</span></span> <span data-ttu-id="08ea2-205"><see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="08ea2-205"><see langword="Integer" />.</span></span> <span data-ttu-id="08ea2-206">将返回其最小可用下标的维度。</span><span class="sxs-lookup"><span data-stu-id="08ea2-206">The dimension for which the lowest possible subscript is to be returned.</span></span> <span data-ttu-id="08ea2-207">对第一维使用 1，对第二维使用 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="08ea2-207">Use 1 for the first dimension, 2 for the second, and so on.</span></span> <span data-ttu-id="08ea2-208">如果省略 <paramref name="Rank" />，则假定为 1。</span><span class="sxs-lookup"><span data-stu-id="08ea2-208">If <paramref name="Rank" /> is omitted, 1 is assumed.</span></span></param>
        <summary><span data-ttu-id="08ea2-209">返回数组的指示维度的最小可用下标。</span><span class="sxs-lookup"><span data-stu-id="08ea2-209">Returns the lowest available subscript for the indicated dimension of an array.</span></span></summary>
        <returns><span data-ttu-id="08ea2-210"><see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="08ea2-210"><see langword="Integer" />.</span></span> <span data-ttu-id="08ea2-211">指定维度的下标可以包含的最小值。</span><span class="sxs-lookup"><span data-stu-id="08ea2-211">The lowest value the subscript for the specified dimension can contain.</span></span> <span data-ttu-id="08ea2-212">只要 <paramref name="Array" /> 已初始化，即使其中没有元素（例如，它是一个零长度字符串），<see langword="LBound" /> 也始终返回 0。</span><span class="sxs-lookup"><span data-stu-id="08ea2-212"><see langword="LBound" /> always returns 0 as long as <paramref name="Array" /> has been initialized, even if it has no elements, for example if it is a zero-length string.</span></span> <span data-ttu-id="08ea2-213">如果 <paramref name="Array" /> 为 <see langword="Nothing" />，则 <see langword="LBound" /> 将引发 <see cref="T:System.ArgumentNullException" />。</span><span class="sxs-lookup"><span data-stu-id="08ea2-213">If <paramref name="Array" /> is <see langword="Nothing" />, <see langword="LBound" /> throws an <see cref="T:System.ArgumentNullException" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08ea2-214">由于数组下标从 0 开始，因此每一维度最小可用的下标总是为 0。</span><span class="sxs-lookup"><span data-stu-id="08ea2-214">Since array subscripts start at 0, the lowest available subscript for every dimension is always 0.</span></span>  
  
 <span data-ttu-id="08ea2-215">对于与以下维度数组`LBound`下表中返回的值：</span><span class="sxs-lookup"><span data-stu-id="08ea2-215">For an array with the following dimensions, `LBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="08ea2-216">调用到 LBound</span><span class="sxs-lookup"><span data-stu-id="08ea2-216">Call to LBound</span></span>|<span data-ttu-id="08ea2-217">返回值</span><span class="sxs-lookup"><span data-stu-id="08ea2-217">Return value</span></span>|  
|--------------------|------------------|  
|`LBound(a, 1)`|<span data-ttu-id="08ea2-218">0</span><span class="sxs-lookup"><span data-stu-id="08ea2-218">0</span></span>|  
|`LBound(a, 2)`|<span data-ttu-id="08ea2-219">0</span><span class="sxs-lookup"><span data-stu-id="08ea2-219">0</span></span>|  
|`LBound(a, 3)`|<span data-ttu-id="08ea2-220">0</span><span class="sxs-lookup"><span data-stu-id="08ea2-220">0</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="08ea2-221">下面的示例使用`LBound`函数来确定数组的指示维度最小可用下标。</span><span class="sxs-lookup"><span data-stu-id="08ea2-221">The following example uses the `LBound` function to determine the lowest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="08ea2-222"><paramref name="Array" /> 为 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="08ea2-222"><paramref name="Array" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="08ea2-223"><paramref name="Rank" /> 小于 1，或 <paramref name="Rank" /> 大于 <paramref name="Array" /> 的级别。</span><span class="sxs-lookup"><span data-stu-id="08ea2-223"><paramref name="Rank" /> less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md"><span data-ttu-id="08ea2-224">Dim 语句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="08ea2-224">Dim Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md"><span data-ttu-id="08ea2-225">ReDim 语句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="08ea2-225">ReDim Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberSignature Language="F#" Value="static member QBColor : int -&gt; int" Usage="Microsoft.VisualBasic.Information.QBColor Color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color"><span data-ttu-id="08ea2-226">必需。</span><span class="sxs-lookup"><span data-stu-id="08ea2-226">Required.</span></span> <span data-ttu-id="08ea2-227">0–15 范围内的整数。</span><span class="sxs-lookup"><span data-stu-id="08ea2-227">A whole number in the range 0-15.</span></span></param>
        <summary><span data-ttu-id="08ea2-228">返回一个 <see langword="Integer" /> 值，表示与指定的颜色编号对应的 RGB 颜色代码。</span><span class="sxs-lookup"><span data-stu-id="08ea2-228">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span></span></summary>
        <returns><span data-ttu-id="08ea2-229">返回一个 <see langword="Integer" /> 值，表示与指定的颜色编号对应的 RGB 颜色代码。</span><span class="sxs-lookup"><span data-stu-id="08ea2-229">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08ea2-230">从最低有效字节开始，返回的值指定用于在使用 Visual Basic 语言的 RGB 系统中设置适当的颜色的红色、 绿色和蓝色值。</span><span class="sxs-lookup"><span data-stu-id="08ea2-230">Starting with the least-significant byte, the returned value specifies the red, green, and blue values used to set the appropriate color in the RGB system used by the Visual Basic language.</span></span>  
  
 <span data-ttu-id="08ea2-231">`Color`自变量具有这些设置。</span><span class="sxs-lookup"><span data-stu-id="08ea2-231">The `Color` argument has these settings.</span></span>  
  
|<span data-ttu-id="08ea2-232">数字</span><span class="sxs-lookup"><span data-stu-id="08ea2-232">Number</span></span>|<span data-ttu-id="08ea2-233">颜色</span><span class="sxs-lookup"><span data-stu-id="08ea2-233">Color</span></span>|<span data-ttu-id="08ea2-234">数字</span><span class="sxs-lookup"><span data-stu-id="08ea2-234">Number</span></span>|<span data-ttu-id="08ea2-235">颜色</span><span class="sxs-lookup"><span data-stu-id="08ea2-235">Color</span></span>|  
|------------|-----------|------------|-----------|  
|<span data-ttu-id="08ea2-236">0</span><span class="sxs-lookup"><span data-stu-id="08ea2-236">0</span></span>|<span data-ttu-id="08ea2-237">黑色</span><span class="sxs-lookup"><span data-stu-id="08ea2-237">Black</span></span>|<span data-ttu-id="08ea2-238">8</span><span class="sxs-lookup"><span data-stu-id="08ea2-238">8</span></span>|<span data-ttu-id="08ea2-239">灰色</span><span class="sxs-lookup"><span data-stu-id="08ea2-239">Gray</span></span>|  
|<span data-ttu-id="08ea2-240">1</span><span class="sxs-lookup"><span data-stu-id="08ea2-240">1</span></span>|<span data-ttu-id="08ea2-241">蓝色</span><span class="sxs-lookup"><span data-stu-id="08ea2-241">Blue</span></span>|<span data-ttu-id="08ea2-242">9</span><span class="sxs-lookup"><span data-stu-id="08ea2-242">9</span></span>|<span data-ttu-id="08ea2-243">浅蓝色</span><span class="sxs-lookup"><span data-stu-id="08ea2-243">Light blue</span></span>|  
|<span data-ttu-id="08ea2-244">2</span><span class="sxs-lookup"><span data-stu-id="08ea2-244">2</span></span>|<span data-ttu-id="08ea2-245">绿色</span><span class="sxs-lookup"><span data-stu-id="08ea2-245">Green</span></span>|<span data-ttu-id="08ea2-246">10</span><span class="sxs-lookup"><span data-stu-id="08ea2-246">10</span></span>|<span data-ttu-id="08ea2-247">浅绿色</span><span class="sxs-lookup"><span data-stu-id="08ea2-247">Light green</span></span>|  
|<span data-ttu-id="08ea2-248">3</span><span class="sxs-lookup"><span data-stu-id="08ea2-248">3</span></span>|<span data-ttu-id="08ea2-249">蓝绿色</span><span class="sxs-lookup"><span data-stu-id="08ea2-249">Cyan</span></span>|<span data-ttu-id="08ea2-250">11</span><span class="sxs-lookup"><span data-stu-id="08ea2-250">11</span></span>|<span data-ttu-id="08ea2-251">浅青色</span><span class="sxs-lookup"><span data-stu-id="08ea2-251">Light cyan</span></span>|  
|<span data-ttu-id="08ea2-252">4</span><span class="sxs-lookup"><span data-stu-id="08ea2-252">4</span></span>|<span data-ttu-id="08ea2-253">红色</span><span class="sxs-lookup"><span data-stu-id="08ea2-253">Red</span></span>|<span data-ttu-id="08ea2-254">12</span><span class="sxs-lookup"><span data-stu-id="08ea2-254">12</span></span>|<span data-ttu-id="08ea2-255">浅红色</span><span class="sxs-lookup"><span data-stu-id="08ea2-255">Light red</span></span>|  
|<span data-ttu-id="08ea2-256">5</span><span class="sxs-lookup"><span data-stu-id="08ea2-256">5</span></span>|<span data-ttu-id="08ea2-257">洋红色</span><span class="sxs-lookup"><span data-stu-id="08ea2-257">Magenta</span></span>|<span data-ttu-id="08ea2-258">13</span><span class="sxs-lookup"><span data-stu-id="08ea2-258">13</span></span>|<span data-ttu-id="08ea2-259">浅洋红色</span><span class="sxs-lookup"><span data-stu-id="08ea2-259">Light magenta</span></span>|  
|<span data-ttu-id="08ea2-260">6</span><span class="sxs-lookup"><span data-stu-id="08ea2-260">6</span></span>|<span data-ttu-id="08ea2-261">黄色</span><span class="sxs-lookup"><span data-stu-id="08ea2-261">Yellow</span></span>|<span data-ttu-id="08ea2-262">14</span><span class="sxs-lookup"><span data-stu-id="08ea2-262">14</span></span>|<span data-ttu-id="08ea2-263">淡黄色</span><span class="sxs-lookup"><span data-stu-id="08ea2-263">Light yellow</span></span>|  
|<span data-ttu-id="08ea2-264">7</span><span class="sxs-lookup"><span data-stu-id="08ea2-264">7</span></span>|<span data-ttu-id="08ea2-265">白色</span><span class="sxs-lookup"><span data-stu-id="08ea2-265">White</span></span>|<span data-ttu-id="08ea2-266">15</span><span class="sxs-lookup"><span data-stu-id="08ea2-266">15</span></span>|<span data-ttu-id="08ea2-267">亮白色</span><span class="sxs-lookup"><span data-stu-id="08ea2-267">Bright white</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="08ea2-268">此示例使用`QBColor`函数来更改颜色由`colorInteger`。</span><span class="sxs-lookup"><span data-stu-id="08ea2-268">This example uses the `QBColor` function to change to the color indicated by `colorInteger`.</span></span> <span data-ttu-id="08ea2-269">`QBColor` 接受 0 到 15 之间的整数值。</span><span class="sxs-lookup"><span data-stu-id="08ea2-269">`QBColor` accepts integer values between 0 and 15.</span></span>  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="08ea2-270"><paramref name="Color" /> 不在 0 到 15（均含）范围之内。</span><span class="sxs-lookup"><span data-stu-id="08ea2-270"><paramref name="Color" /> is outside of range 0 to 15, inclusive.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberSignature Language="F#" Value="static member RGB : int * int * int -&gt; int" Usage="Microsoft.VisualBasic.Information.RGB (Red, Green, Blue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red"><span data-ttu-id="08ea2-271">必需。</span><span class="sxs-lookup"><span data-stu-id="08ea2-271">Required.</span></span> <span data-ttu-id="08ea2-272">0–255 范围内（均含）的 <see langword="Integer" /> 值，表示颜色中红色分量的强度。</span><span class="sxs-lookup"><span data-stu-id="08ea2-272"><see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the red component of the color.</span></span></param>
        <param name="Green"><span data-ttu-id="08ea2-273">必需。</span><span class="sxs-lookup"><span data-stu-id="08ea2-273">Required.</span></span> <span data-ttu-id="08ea2-274">0–255 范围内（均含）的 <see langword="Integer" /> 值，表示颜色中绿色分量的强度。</span><span class="sxs-lookup"><span data-stu-id="08ea2-274"><see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the green component of the color.</span></span></param>
        <param name="Blue"><span data-ttu-id="08ea2-275">必需。</span><span class="sxs-lookup"><span data-stu-id="08ea2-275">Required.</span></span> <span data-ttu-id="08ea2-276">0–255 范围内（均含）的 <see langword="Integer" /> 值，表示颜色中蓝色分量的强度。</span><span class="sxs-lookup"><span data-stu-id="08ea2-276"><see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the blue component of the color.</span></span></param>
        <summary><span data-ttu-id="08ea2-277">返回一个 <see langword="Integer" /> 值，表示由一组红色、绿色和蓝色分量形成的 RGB 颜色值。</span><span class="sxs-lookup"><span data-stu-id="08ea2-277">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span></span></summary>
        <returns><span data-ttu-id="08ea2-278">返回一个 <see langword="Integer" /> 值，表示由一组红色、绿色和蓝色分量形成的 RGB 颜色值。</span><span class="sxs-lookup"><span data-stu-id="08ea2-278">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08ea2-279">应用程序的方法和属性接受颜色规范的预期规范是一个数字代表 RGB 颜色值。</span><span class="sxs-lookup"><span data-stu-id="08ea2-279">Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value.</span></span> <span data-ttu-id="08ea2-280">RGB 颜色值指定相对强度的红色、 绿色和蓝色的会导致特定颜色显示。</span><span class="sxs-lookup"><span data-stu-id="08ea2-280">An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</span></span>  
  
 <span data-ttu-id="08ea2-281">如果任何参数的值`RGB`大于 255，255 使用。</span><span class="sxs-lookup"><span data-stu-id="08ea2-281">If the value for any argument to `RGB` is greater than 255, 255 is used.</span></span>  
  
 <span data-ttu-id="08ea2-282">下表列出了一些标准颜色以及它们包含的红色、 绿色和蓝色值。</span><span class="sxs-lookup"><span data-stu-id="08ea2-282">The following table lists some standard colors and the red, green, and blue values they include.</span></span>  
  
|<span data-ttu-id="08ea2-283">颜色</span><span class="sxs-lookup"><span data-stu-id="08ea2-283">Color</span></span>|<span data-ttu-id="08ea2-284">红色值</span><span class="sxs-lookup"><span data-stu-id="08ea2-284">Red value</span></span>|<span data-ttu-id="08ea2-285">绿色值</span><span class="sxs-lookup"><span data-stu-id="08ea2-285">Green value</span></span>|<span data-ttu-id="08ea2-286">蓝色的值</span><span class="sxs-lookup"><span data-stu-id="08ea2-286">Blue value</span></span>|  
|-----------|---------------|-----------------|----------------|  
|<span data-ttu-id="08ea2-287">黑色</span><span class="sxs-lookup"><span data-stu-id="08ea2-287">Black</span></span>|<span data-ttu-id="08ea2-288">0</span><span class="sxs-lookup"><span data-stu-id="08ea2-288">0</span></span>|<span data-ttu-id="08ea2-289">0</span><span class="sxs-lookup"><span data-stu-id="08ea2-289">0</span></span>|<span data-ttu-id="08ea2-290">0</span><span class="sxs-lookup"><span data-stu-id="08ea2-290">0</span></span>|  
|<span data-ttu-id="08ea2-291">蓝色</span><span class="sxs-lookup"><span data-stu-id="08ea2-291">Blue</span></span>|<span data-ttu-id="08ea2-292">0</span><span class="sxs-lookup"><span data-stu-id="08ea2-292">0</span></span>|<span data-ttu-id="08ea2-293">0</span><span class="sxs-lookup"><span data-stu-id="08ea2-293">0</span></span>|<span data-ttu-id="08ea2-294">255</span><span class="sxs-lookup"><span data-stu-id="08ea2-294">255</span></span>|  
|<span data-ttu-id="08ea2-295">绿色</span><span class="sxs-lookup"><span data-stu-id="08ea2-295">Green</span></span>|<span data-ttu-id="08ea2-296">0</span><span class="sxs-lookup"><span data-stu-id="08ea2-296">0</span></span>|<span data-ttu-id="08ea2-297">255</span><span class="sxs-lookup"><span data-stu-id="08ea2-297">255</span></span>|<span data-ttu-id="08ea2-298">0</span><span class="sxs-lookup"><span data-stu-id="08ea2-298">0</span></span>|  
|<span data-ttu-id="08ea2-299">蓝绿色</span><span class="sxs-lookup"><span data-stu-id="08ea2-299">Cyan</span></span>|<span data-ttu-id="08ea2-300">0</span><span class="sxs-lookup"><span data-stu-id="08ea2-300">0</span></span>|<span data-ttu-id="08ea2-301">255</span><span class="sxs-lookup"><span data-stu-id="08ea2-301">255</span></span>|<span data-ttu-id="08ea2-302">255</span><span class="sxs-lookup"><span data-stu-id="08ea2-302">255</span></span>|  
|<span data-ttu-id="08ea2-303">红色</span><span class="sxs-lookup"><span data-stu-id="08ea2-303">Red</span></span>|<span data-ttu-id="08ea2-304">255</span><span class="sxs-lookup"><span data-stu-id="08ea2-304">255</span></span>|<span data-ttu-id="08ea2-305">0</span><span class="sxs-lookup"><span data-stu-id="08ea2-305">0</span></span>|<span data-ttu-id="08ea2-306">0</span><span class="sxs-lookup"><span data-stu-id="08ea2-306">0</span></span>|  
|<span data-ttu-id="08ea2-307">洋红色</span><span class="sxs-lookup"><span data-stu-id="08ea2-307">Magenta</span></span>|<span data-ttu-id="08ea2-308">255</span><span class="sxs-lookup"><span data-stu-id="08ea2-308">255</span></span>|<span data-ttu-id="08ea2-309">0</span><span class="sxs-lookup"><span data-stu-id="08ea2-309">0</span></span>|<span data-ttu-id="08ea2-310">255</span><span class="sxs-lookup"><span data-stu-id="08ea2-310">255</span></span>|  
|<span data-ttu-id="08ea2-311">黄色</span><span class="sxs-lookup"><span data-stu-id="08ea2-311">Yellow</span></span>|<span data-ttu-id="08ea2-312">255</span><span class="sxs-lookup"><span data-stu-id="08ea2-312">255</span></span>|<span data-ttu-id="08ea2-313">255</span><span class="sxs-lookup"><span data-stu-id="08ea2-313">255</span></span>|<span data-ttu-id="08ea2-314">0</span><span class="sxs-lookup"><span data-stu-id="08ea2-314">0</span></span>|  
|<span data-ttu-id="08ea2-315">白色</span><span class="sxs-lookup"><span data-stu-id="08ea2-315">White</span></span>|<span data-ttu-id="08ea2-316">255</span><span class="sxs-lookup"><span data-stu-id="08ea2-316">255</span></span>|<span data-ttu-id="08ea2-317">255</span><span class="sxs-lookup"><span data-stu-id="08ea2-317">255</span></span>|<span data-ttu-id="08ea2-318">255</span><span class="sxs-lookup"><span data-stu-id="08ea2-318">255</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="08ea2-319">此示例演示如何`RGB`函数用于返回一个整数，表示`RGB`颜色值。</span><span class="sxs-lookup"><span data-stu-id="08ea2-319">This example shows how the `RGB` function is used to return a whole number representing an `RGB` color value.</span></span>  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="08ea2-320"><paramref name="Green" />、<paramref name="Blue" />，或 <paramref name="Red" /> 不在 0 到 255（含 0 和 255）范围之内。</span><span class="sxs-lookup"><span data-stu-id="08ea2-320"><paramref name="Green" />, <paramref name="Blue" />, or <paramref name="Red" /> is outside of range 0 to 255, inclusive.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberSignature Language="F#" Value="static member SystemTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.SystemTypeName VbName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName"><span data-ttu-id="08ea2-321">必需。</span><span class="sxs-lookup"><span data-stu-id="08ea2-321">Required.</span></span> <span data-ttu-id="08ea2-322">一个包含 Visual Basic 类型名称的 <see langword="String" /> 变量。</span><span class="sxs-lookup"><span data-stu-id="08ea2-322">A <see langword="String" /> variable containing a Visual Basic type name.</span></span></param>
        <summary><span data-ttu-id="08ea2-323">返回一个 <see langword="String" /> 值，它包含变量的系统数据类型名称。</span><span class="sxs-lookup"><span data-stu-id="08ea2-323">Returns a <see langword="String" /> value containing the system data type name of a variable.</span></span></summary>
        <returns><span data-ttu-id="08ea2-324">返回一个 <see langword="String" /> 值，它包含变量的系统数据类型名称。</span><span class="sxs-lookup"><span data-stu-id="08ea2-324">Returns a <see langword="String" /> value containing the system data type name of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08ea2-325">`SystemTypeName` 返回的完全限定公共语言运行时 (CLR) 类型名称对应于 Visual Basic 类型名称。</span><span class="sxs-lookup"><span data-stu-id="08ea2-325">`SystemTypeName` returns the fully qualified common language runtime (CLR) type name corresponding to the Visual Basic type name.</span></span> <span data-ttu-id="08ea2-326">例如，如果`VbName`包含"日期"`SystemTypeName`返回"System.DateTime"。</span><span class="sxs-lookup"><span data-stu-id="08ea2-326">For example, if `VbName` contains "Date", `SystemTypeName` returns "System.DateTime".</span></span> <span data-ttu-id="08ea2-327">如果`SystemTypeName`不能识别的值`VbName`，它将返回`Nothing`(不是字符串"Nothing")。</span><span class="sxs-lookup"><span data-stu-id="08ea2-327">If `SystemTypeName` does not recognize the value of `VbName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08ea2-328">下面的示例使用`SystemTypeName`函数以返回数据的多个变量的类型名称。</span><span class="sxs-lookup"><span data-stu-id="08ea2-328">The following example uses the `SystemTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="08ea2-329">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="08ea2-329">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member TypeName : obj -&gt; string" Usage="Microsoft.VisualBasic.Information.TypeName VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="08ea2-330">必需。</span><span class="sxs-lookup"><span data-stu-id="08ea2-330">Required.</span></span> <span data-ttu-id="08ea2-331"><see langword="Object" /> 变量。</span><span class="sxs-lookup"><span data-stu-id="08ea2-331"><see langword="Object" /> variable.</span></span> <span data-ttu-id="08ea2-332">如果 <see langword="Option Strict" /> 为 <see langword="Off" />，则可以传递除结构之外的任何数据类型的变量。</span><span class="sxs-lookup"><span data-stu-id="08ea2-332">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span></span></param>
        <summary><span data-ttu-id="08ea2-333">返回一个 <see langword="String" /> 值，它包含变量的数据类型信息。</span><span class="sxs-lookup"><span data-stu-id="08ea2-333">Returns a <see langword="String" /> value containing data-type information about a variable.</span></span></summary>
        <returns><span data-ttu-id="08ea2-334">返回一个 <see langword="String" /> 值，它包含变量的数据类型信息。</span><span class="sxs-lookup"><span data-stu-id="08ea2-334">Returns a <see langword="String" /> value containing data-type information about a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08ea2-335">下表显示`String`返回的值`TypeName`不同内容的`VarName`。</span><span class="sxs-lookup"><span data-stu-id="08ea2-335">The following table shows the `String` values returned by `TypeName` for different contents of `VarName`.</span></span>  
  
|<span data-ttu-id="08ea2-336">`VarName` 内容</span><span class="sxs-lookup"><span data-stu-id="08ea2-336">`VarName` contents</span></span>|<span data-ttu-id="08ea2-337">返回的字符串</span><span class="sxs-lookup"><span data-stu-id="08ea2-337">String returned</span></span>|  
|------------------------|---------------------|  
|<span data-ttu-id="08ea2-338">16 位`True`或`False`值类型</span><span class="sxs-lookup"><span data-stu-id="08ea2-338">16-bit `True` or `False` value type</span></span>|<span data-ttu-id="08ea2-339">"Boolean"</span><span class="sxs-lookup"><span data-stu-id="08ea2-339">"Boolean"</span></span>|  
|<span data-ttu-id="08ea2-340">8 位二进制值类型</span><span class="sxs-lookup"><span data-stu-id="08ea2-340">8-bit binary value type</span></span>|<span data-ttu-id="08ea2-341">"字节"</span><span class="sxs-lookup"><span data-stu-id="08ea2-341">"Byte"</span></span>|  
|<span data-ttu-id="08ea2-342">16 位字符的值类型</span><span class="sxs-lookup"><span data-stu-id="08ea2-342">16-bit character value type</span></span>|<span data-ttu-id="08ea2-343">"Char"</span><span class="sxs-lookup"><span data-stu-id="08ea2-343">"Char"</span></span>|  
|<span data-ttu-id="08ea2-344">64 位日期和时间值类型</span><span class="sxs-lookup"><span data-stu-id="08ea2-344">64-bit date and time value type</span></span>|<span data-ttu-id="08ea2-345">"日期"</span><span class="sxs-lookup"><span data-stu-id="08ea2-345">"Date"</span></span>|  
|<span data-ttu-id="08ea2-346">指示缺少或不存在的数据的引用类型</span><span class="sxs-lookup"><span data-stu-id="08ea2-346">Reference type indicating missing or nonexistent data</span></span>|<span data-ttu-id="08ea2-347">"DBNull"</span><span class="sxs-lookup"><span data-stu-id="08ea2-347">"DBNull"</span></span>|  
|<span data-ttu-id="08ea2-348">128 位定点数值类型</span><span class="sxs-lookup"><span data-stu-id="08ea2-348">128-bit fixed-point numeric value type</span></span>|<span data-ttu-id="08ea2-349">"Decimal"</span><span class="sxs-lookup"><span data-stu-id="08ea2-349">"Decimal"</span></span>|  
|<span data-ttu-id="08ea2-350">64 位浮点型数值类型</span><span class="sxs-lookup"><span data-stu-id="08ea2-350">64-bit floating-point numeric value type</span></span>|<span data-ttu-id="08ea2-351">"Double"</span><span class="sxs-lookup"><span data-stu-id="08ea2-351">"Double"</span></span>|  
|<span data-ttu-id="08ea2-352">32 位整数值类型</span><span class="sxs-lookup"><span data-stu-id="08ea2-352">32-bit integer value type</span></span>|<span data-ttu-id="08ea2-353">"整数"</span><span class="sxs-lookup"><span data-stu-id="08ea2-353">"Integer"</span></span>|  
|<span data-ttu-id="08ea2-354">指向未专用化的对象的引用类型</span><span class="sxs-lookup"><span data-stu-id="08ea2-354">Reference type pointing to an unspecialized object</span></span>|<span data-ttu-id="08ea2-355">"对象"</span><span class="sxs-lookup"><span data-stu-id="08ea2-355">"Object"</span></span>|  
|<span data-ttu-id="08ea2-356">指向从类创建一个专用对象引用类型*objectclass*</span><span class="sxs-lookup"><span data-stu-id="08ea2-356">Reference type pointing to a specialized object created from class *objectclass*</span></span>|<span data-ttu-id="08ea2-357">"*objectclass*"</span><span class="sxs-lookup"><span data-stu-id="08ea2-357">"*objectclass*"</span></span>|  
|<span data-ttu-id="08ea2-358">64 位整数值类型</span><span class="sxs-lookup"><span data-stu-id="08ea2-358">64-bit integer value type</span></span>|<span data-ttu-id="08ea2-359">"Long"</span><span class="sxs-lookup"><span data-stu-id="08ea2-359">"Long"</span></span>|  
|<span data-ttu-id="08ea2-360">当前分配给它的任何对象的引用类型</span><span class="sxs-lookup"><span data-stu-id="08ea2-360">Reference type with no object currently assigned to it</span></span>|<span data-ttu-id="08ea2-361">"Nothing"</span><span class="sxs-lookup"><span data-stu-id="08ea2-361">"Nothing"</span></span>|  
|<span data-ttu-id="08ea2-362">8 位有符号的整数值类型</span><span class="sxs-lookup"><span data-stu-id="08ea2-362">8-bit signed integer value type</span></span>|<span data-ttu-id="08ea2-363">"SByte"</span><span class="sxs-lookup"><span data-stu-id="08ea2-363">"SByte"</span></span>|  
|<span data-ttu-id="08ea2-364">16 位整数值类型</span><span class="sxs-lookup"><span data-stu-id="08ea2-364">16-bit integer value type</span></span>|<span data-ttu-id="08ea2-365">"Short"</span><span class="sxs-lookup"><span data-stu-id="08ea2-365">"Short"</span></span>|  
|<span data-ttu-id="08ea2-366">32 位浮点型数值类型</span><span class="sxs-lookup"><span data-stu-id="08ea2-366">32-bit floating-point numeric value type</span></span>|<span data-ttu-id="08ea2-367">"单个"</span><span class="sxs-lookup"><span data-stu-id="08ea2-367">"Single"</span></span>|  
|<span data-ttu-id="08ea2-368">指向的 16 位字符的字符串的引用类型</span><span class="sxs-lookup"><span data-stu-id="08ea2-368">Reference type pointing to a string of 16-bit characters</span></span>|<span data-ttu-id="08ea2-369">"String"</span><span class="sxs-lookup"><span data-stu-id="08ea2-369">"String"</span></span>|  
|<span data-ttu-id="08ea2-370">32 位无符号的整数值类型</span><span class="sxs-lookup"><span data-stu-id="08ea2-370">32-bit unsigned integer value type</span></span>|<span data-ttu-id="08ea2-371">"UInteger"</span><span class="sxs-lookup"><span data-stu-id="08ea2-371">"UInteger"</span></span>|  
|<span data-ttu-id="08ea2-372">64 位无符号的整数值类型</span><span class="sxs-lookup"><span data-stu-id="08ea2-372">64-bit unsigned integer value type</span></span>|<span data-ttu-id="08ea2-373">"ULong"</span><span class="sxs-lookup"><span data-stu-id="08ea2-373">"ULong"</span></span>|  
|<span data-ttu-id="08ea2-374">16 位无符号的整数值类型</span><span class="sxs-lookup"><span data-stu-id="08ea2-374">16-bit unsigned integer value type</span></span>|<span data-ttu-id="08ea2-375">"UShort"</span><span class="sxs-lookup"><span data-stu-id="08ea2-375">"UShort"</span></span>|  
  
 <span data-ttu-id="08ea2-376">如果`VarName`是一个数组，则返回的字符串可以是任何一对空括号前面表中的字符串。</span><span class="sxs-lookup"><span data-stu-id="08ea2-376">If `VarName` is an array, the returned string can be any one of the strings in the preceding table with empty parentheses appended.</span></span> <span data-ttu-id="08ea2-377">例如，如果`VarName`指向一个整数，数组`TypeName`返回"Integer()"。</span><span class="sxs-lookup"><span data-stu-id="08ea2-377">For example, if `VarName` points to an array of integers, `TypeName` returns "Integer()".</span></span>  
  
 <span data-ttu-id="08ea2-378">当`TypeName`返回引用类型的名称如类，它将返回仅名称本身，而不是限定名称。</span><span class="sxs-lookup"><span data-stu-id="08ea2-378">When `TypeName` returns the name of a reference type such as a class, it returns only the name itself, not the qualified name.</span></span> <span data-ttu-id="08ea2-379">例如，如果`VarName`指向类的对象<xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>，`TypeName`返回"PaperSource"。</span><span class="sxs-lookup"><span data-stu-id="08ea2-379">For example, if `VarName` points to an object of class <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` returns "PaperSource".</span></span> <span data-ttu-id="08ea2-380">请注意，如果声明为特定类类型的变量，但不具有分配给它的对象`TypeName`返回"Nothing"。</span><span class="sxs-lookup"><span data-stu-id="08ea2-380">Note that if the variable is declared to be of a certain class type but does not have an object assigned to it, `TypeName` returns "Nothing".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08ea2-381">下面的示例使用`TypeName`函数以返回有关多个变量的数据类型信息。</span><span class="sxs-lookup"><span data-stu-id="08ea2-381">The following example uses the `TypeName` function to return data type information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="08ea2-382">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="08ea2-382">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member UBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.UBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array"><span data-ttu-id="08ea2-383">必需。</span><span class="sxs-lookup"><span data-stu-id="08ea2-383">Required.</span></span> <span data-ttu-id="08ea2-384">任何数据类型的数组。</span><span class="sxs-lookup"><span data-stu-id="08ea2-384">Array of any data type.</span></span> <span data-ttu-id="08ea2-385">要在其中查找维度的最大可能下标的数组。</span><span class="sxs-lookup"><span data-stu-id="08ea2-385">The array in which you want to find the highest possible subscript of a dimension.</span></span></param>
        <param name="Rank"><span data-ttu-id="08ea2-386">可选。</span><span class="sxs-lookup"><span data-stu-id="08ea2-386">Optional.</span></span> <span data-ttu-id="08ea2-387"><see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="08ea2-387"><see langword="Integer" />.</span></span> <span data-ttu-id="08ea2-388">将返回其最大可用下标的维度。</span><span class="sxs-lookup"><span data-stu-id="08ea2-388">The dimension for which the highest possible subscript is to be returned.</span></span> <span data-ttu-id="08ea2-389">对第一维使用 1，对第二维使用 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="08ea2-389">Use 1 for the first dimension, 2 for the second, and so on.</span></span> <span data-ttu-id="08ea2-390">如果省略 <paramref name="Rank" />，则假定为 1。</span><span class="sxs-lookup"><span data-stu-id="08ea2-390">If <paramref name="Rank" /> is omitted, 1 is assumed.</span></span></param>
        <summary><span data-ttu-id="08ea2-391">返回数组的指示维度的最大可用下标。</span><span class="sxs-lookup"><span data-stu-id="08ea2-391">Returns the highest available subscript for the indicated dimension of an array.</span></span></summary>
        <returns><span data-ttu-id="08ea2-392"><see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="08ea2-392"><see langword="Integer" />.</span></span> <span data-ttu-id="08ea2-393">指定维度的下标可以包含的最大值。</span><span class="sxs-lookup"><span data-stu-id="08ea2-393">The highest value the subscript for the specified dimension can contain.</span></span> <span data-ttu-id="08ea2-394">如果 <paramref name="Array" /> 只有一个元素，则 <see langword="UBound" /> 返回 0。</span><span class="sxs-lookup"><span data-stu-id="08ea2-394">If <paramref name="Array" /> has only one element, <see langword="UBound" /> returns 0.</span></span> <span data-ttu-id="08ea2-395">如果 <paramref name="Array" /> 没有元素，例如它是一个零长度字符串，则 <see langword="UBound" /> 返回 -1。</span><span class="sxs-lookup"><span data-stu-id="08ea2-395">If <paramref name="Array" /> has no elements, for example if it is a zero-length string, <see langword="UBound" /> returns -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08ea2-396">由于数组下标从 0 开始，维的长度是比该维度的最大可用下标大 1。</span><span class="sxs-lookup"><span data-stu-id="08ea2-396">Since array subscripts start at 0, the length of a dimension is greater by one than the highest available subscript for that dimension.</span></span>  
  
 <span data-ttu-id="08ea2-397">对于与以下维度数组`UBound`下表中返回的值：</span><span class="sxs-lookup"><span data-stu-id="08ea2-397">For an array with the following dimensions, `UBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="08ea2-398">调用到 UBound</span><span class="sxs-lookup"><span data-stu-id="08ea2-398">Call to UBound</span></span>|<span data-ttu-id="08ea2-399">返回值</span><span class="sxs-lookup"><span data-stu-id="08ea2-399">Return value</span></span>|  
|--------------------|------------------|  
|`UBound(a, 1)`|<span data-ttu-id="08ea2-400">100</span><span class="sxs-lookup"><span data-stu-id="08ea2-400">100</span></span>|  
|`UBound(a, 2)`|<span data-ttu-id="08ea2-401">5</span><span class="sxs-lookup"><span data-stu-id="08ea2-401">5</span></span>|  
|`UBound(a, 3)`|<span data-ttu-id="08ea2-402">4</span><span class="sxs-lookup"><span data-stu-id="08ea2-402">4</span></span>|  
  
 <span data-ttu-id="08ea2-403">可以使用`UBound`来确定总中一个数组，但您的元素数必须调整它返回到一个事实，即下标从 0 开始的帐户的值。</span><span class="sxs-lookup"><span data-stu-id="08ea2-403">You can use `UBound` to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0.</span></span> <span data-ttu-id="08ea2-404">以下示例计算数组的总大小`a`在前面的示例：</span><span class="sxs-lookup"><span data-stu-id="08ea2-404">The following example calculates the total size of the array `a` in the preceding example:</span></span>  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 <span data-ttu-id="08ea2-405">计算的值`total`为 3030，这是 101 \* 6 \* 5。</span><span class="sxs-lookup"><span data-stu-id="08ea2-405">The value calculated for `total` is 3030, which is 101 \* 6 \* 5.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08ea2-406">下面的示例使用`UBound`函数来确定最大可用下标的指示维度的数组。</span><span class="sxs-lookup"><span data-stu-id="08ea2-406">The following example uses the `UBound` function to determine the highest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="08ea2-407"><paramref name="Array" /> 为 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="08ea2-407"><paramref name="Array" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="08ea2-408"><paramref name="Rank" /> 小于 1，或 <paramref name="Rank" /> 大于 <paramref name="Array" /> 的级别。</span><span class="sxs-lookup"><span data-stu-id="08ea2-408"><paramref name="Rank" /> is less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md"><span data-ttu-id="08ea2-409">Dim 语句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="08ea2-409">Dim Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md"><span data-ttu-id="08ea2-410">ReDim 语句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="08ea2-410">ReDim Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member VarType : obj -&gt; Microsoft.VisualBasic.VariantType" Usage="Microsoft.VisualBasic.Information.VarType VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="08ea2-411">必需。</span><span class="sxs-lookup"><span data-stu-id="08ea2-411">Required.</span></span> <span data-ttu-id="08ea2-412"><see langword="Object" /> 变量。</span><span class="sxs-lookup"><span data-stu-id="08ea2-412"><see langword="Object" /> variable.</span></span> <span data-ttu-id="08ea2-413">如果 <see langword="Option Strict" /> 为 <see langword="Off" />，则可以传递除结构之外的任何数据类型的变量。</span><span class="sxs-lookup"><span data-stu-id="08ea2-413">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span></span></param>
        <summary><span data-ttu-id="08ea2-414">返回一个 <see langword="Integer" /> 值，它包含变量的数据类型分类。</span><span class="sxs-lookup"><span data-stu-id="08ea2-414">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span></span></summary>
        <returns><span data-ttu-id="08ea2-415">返回一个 <see langword="Integer" /> 值，它包含变量的数据类型分类。</span><span class="sxs-lookup"><span data-stu-id="08ea2-415">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08ea2-416">返回的整数值`VarType`隶属<xref:Microsoft.VisualBasic.VariantType>。</span><span class="sxs-lookup"><span data-stu-id="08ea2-416">The integer value returned by `VarType` is a member of the <xref:Microsoft.VisualBasic.VariantType>.</span></span>  
  
 <span data-ttu-id="08ea2-417">下表显示了返回的值`VarType`的特殊情况的`VarName`。</span><span class="sxs-lookup"><span data-stu-id="08ea2-417">The following table shows the values returned by `VarType` for special cases of `VarName`.</span></span>  
  
|<span data-ttu-id="08ea2-418">所表示的数据类型 `VarName`</span><span class="sxs-lookup"><span data-stu-id="08ea2-418">Data type represented by `VarName`</span></span>|<span data-ttu-id="08ea2-419">返回值 `VarType`</span><span class="sxs-lookup"><span data-stu-id="08ea2-419">Value returned by `VarType`</span></span>|  
|----------------------------------------|---------------------------------|  
|[<span data-ttu-id="08ea2-420">Nothing</span><span class="sxs-lookup"><span data-stu-id="08ea2-420">Nothing</span></span>](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|<span data-ttu-id="08ea2-421">枚举</span><span class="sxs-lookup"><span data-stu-id="08ea2-421">Enumeration</span></span>|<span data-ttu-id="08ea2-422">基础数据类型 (`SByte`， `Byte`， `Short`， `UShort`， `Integer`， `UInteger`， `Long`，或`ULong`)</span><span class="sxs-lookup"><span data-stu-id="08ea2-422">Underlying data type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)</span></span>|  
|<span data-ttu-id="08ea2-423">数组</span><span class="sxs-lookup"><span data-stu-id="08ea2-423">Array</span></span>|<span data-ttu-id="08ea2-424">位或运算的数组元素类型和 `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="08ea2-424">Bitwise OR of array element type and `VariantType.Array`</span></span>|  
|<span data-ttu-id="08ea2-425">数组的数组</span><span class="sxs-lookup"><span data-stu-id="08ea2-425">Array of arrays</span></span>|<span data-ttu-id="08ea2-426">按位 OR`VariantType.Object`和 `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="08ea2-426">Bitwise OR of `VariantType.Object` and `VariantType.Array`</span></span>|  
|<span data-ttu-id="08ea2-427">结构 (<xref:System.ValueType?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="08ea2-427">Structure (<xref:System.ValueType?displayProperty=nameWithType>)</span></span>|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|<span data-ttu-id="08ea2-428">未知</span><span class="sxs-lookup"><span data-stu-id="08ea2-428">Unknown</span></span>|`VariantType.Object`|  
  
   
  
## Examples  
 <span data-ttu-id="08ea2-429">下面的示例使用`VarType`函数以返回有关多个变量的数据类型分类信息。</span><span class="sxs-lookup"><span data-stu-id="08ea2-429">The following example uses the `VarType` function to return data type classification information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="08ea2-430">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="08ea2-430">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberSignature Language="F#" Value="static member VbTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.VbTypeName UrtName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName"><span data-ttu-id="08ea2-431">必需。</span><span class="sxs-lookup"><span data-stu-id="08ea2-431">Required.</span></span> <span data-ttu-id="08ea2-432"><see langword="String" /> 变量，其中包含公共语言运行时所使用的类型名称。</span><span class="sxs-lookup"><span data-stu-id="08ea2-432"><see langword="String" /> variable containing a type name used by the common language runtime.</span></span></param>
        <summary><span data-ttu-id="08ea2-433">返回一个 <see langword="String" /> 值，它包含变量的 Visual Basic 数据类型名称。</span><span class="sxs-lookup"><span data-stu-id="08ea2-433">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span></span></summary>
        <returns><span data-ttu-id="08ea2-434">返回一个 <see langword="String" /> 值，它包含变量的 Visual Basic 数据类型名称。</span><span class="sxs-lookup"><span data-stu-id="08ea2-434">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08ea2-435">`VbTypeName` 返回与公共语言运行时类型名称相对应的 Visual Basic 类型名称。</span><span class="sxs-lookup"><span data-stu-id="08ea2-435">`VbTypeName` returns the Visual Basic type name corresponding to the common language runtime type name.</span></span> <span data-ttu-id="08ea2-436">例如，如果`UrtName`包含"Int32"或"System.Int32"`VbTypeName`返回"Integer"。</span><span class="sxs-lookup"><span data-stu-id="08ea2-436">For example, if `UrtName` contains "Int32" or "System.Int32", `VbTypeName` returns "Integer".</span></span> <span data-ttu-id="08ea2-437">如果`VbTypeName`不能识别的值`UrtName`，它将返回`Nothing`(不是字符串"Nothing")。</span><span class="sxs-lookup"><span data-stu-id="08ea2-437">If `VbTypeName` does not recognize the value of `UrtName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
 <span data-ttu-id="08ea2-438">中的类型名称`UrtName`可以从各种源，例如从获取<xref:System.Reflection.MemberInfo.Name%2A>属性中的<xref:System.Reflection.MemberInfo>构成的数组<xref:System.Type>类。</span><span class="sxs-lookup"><span data-stu-id="08ea2-438">The type name in `UrtName` can be obtained from various sources, for example from the <xref:System.Reflection.MemberInfo.Name%2A> property in the <xref:System.Reflection.MemberInfo> array of the <xref:System.Type> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08ea2-439">下面的示例使用`VbTypeName`函数以返回数据的多个变量的类型名称。</span><span class="sxs-lookup"><span data-stu-id="08ea2-439">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="08ea2-440">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="08ea2-440">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>