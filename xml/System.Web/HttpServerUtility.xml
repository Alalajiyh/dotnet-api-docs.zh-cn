<Type Name="HttpServerUtility" FullName="System.Web.HttpServerUtility">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0b6477787c17199600536f8a4df06d52440d68c5" /><Meta Name="ms.sourcegitcommit" Value="9a6da88bd5455e8274257ca7ad259b42f1de114f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/22/2019" /><Meta Name="ms.locfileid" Value="66008073" /></Metadata><TypeSignature Language="C#" Value="public sealed class HttpServerUtility" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpServerUtility extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.HttpServerUtility" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpServerUtility" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpServerUtility sealed" />
  <TypeSignature Language="F#" Value="type HttpServerUtility = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供用于处理 Web 请求的 Helper 方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 方法和属性<xref:System.Web.HttpServerUtility>类公开通过内部<xref:System.Web.HttpContext.Server%2A>由 ASP.NET 提供的对象。  
  
   
  
## Examples  
 包含源代码的 Visual Studio Web 站点项目是可随附于本主题：[下载](https://go.microsoft.com/fwlink/?LinkId=192870)。  
  
 下面的示例演示如何使用<xref:System.Web.HttpServerUtility.HtmlEncode%2A>方法和<xref:System.Web.HttpServerUtility.UrlEncode%2A>方法的<xref:System.Web.HttpServerUtility>类。 <xref:System.Web.HttpServerUtility.HtmlEncode%2A>方法有助于确保用户提供的任何字符串输入将呈现为静态文本，而不是可执行脚本或 HTML 元素的浏览器中。 <xref:System.Web.HttpServerUtility.UrlEncode%2A>方法对 Url 进行编码，以便它们正确传输 HTTP 流中。  
  
 [!code-aspx-csharp[System.Web.HttpServerUtility1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpServerUtility1/cs/HttpServerUtilityCS.aspx#1)]
 [!code-aspx-vb[System.Web.HttpServerUtility1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpServerUtility1/vb/HttpServerUtilityVB.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.HttpContext" />
  </Docs>
  <Members>
    <Member MemberName="ClearError">
      <MemberSignature Language="C#" Value="public void ClearError ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearError() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.ClearError" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearError ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearError();" />
      <MemberSignature Language="F#" Value="member this.ClearError : unit -&gt; unit" Usage="httpServerUtility.ClearError " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除前一个异常。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 以下示例清除抛出的最后一个异常。  
  
 [!code-csharp[Classic HttpServerUtility.ClearError Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.ClearError Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.ClearError Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.ClearError Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpServerUtility.GetLastError" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateObject">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建 COM 对象的一个服务器实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public object CreateObject (string progID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateObject(string progID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.CreateObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObject (progID As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateObject(System::String ^ progID);" />
      <MemberSignature Language="F#" Value="member this.CreateObject : string -&gt; obj" Usage="httpServerUtility.CreateObject progID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID">要创建其实例的对象的类或类型。</param>
        <summary>创建 COM 对象的服务器实例，该 COM 对象由对象的程序标识符 (ProgID) 标识。</summary>
        <returns>新对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例创建一个对象使用对象的 ProgID。  
  
 [!code-csharp[Classic HttpServerUtility.CreateObject Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObject Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.CreateObject Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObject Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">无法创建对象的实例。</exception>
        <altmember cref="M:System.Web.HttpServerUtility.CreateObjectFromClsid(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public object CreateObject (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateObject(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.CreateObject(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateObject(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.CreateObject : Type -&gt; obj" Usage="httpServerUtility.CreateObject type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><see cref="T:System.Type" /> 表示要创建的对象。</param>
        <summary>创建由对象类型标识的 COM 对象的一个服务器实例。</summary>
        <returns>新对象。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObjectFromClsid">
      <MemberSignature Language="C#" Value="public object CreateObjectFromClsid (string clsid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateObjectFromClsid(string clsid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.CreateObjectFromClsid(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObjectFromClsid (clsid As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateObjectFromClsid(System::String ^ clsid);" />
      <MemberSignature Language="F#" Value="member this.CreateObjectFromClsid : string -&gt; obj" Usage="httpServerUtility.CreateObjectFromClsid clsid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clsid">要创建其实例的对象的类标识符。</param>
        <summary>创建 COM 对象的服务器实例，该对象由对象的类标识符 (CLSID) 标识。</summary>
        <returns>新对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何使用<xref:System.Web.HttpServerUtility.CreateObjectFromClsid%2A>方法来创建 COM 对象的服务器实例。  
  
 [!code-csharp[Classic HttpServerUtility.CreateObjectFromClsid Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObjectFromClsid Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.CreateObjectFromClsid Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObjectFromClsid Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">无法创建对象的实例。</exception>
        <altmember cref="M:System.Web.HttpServerUtility.CreateObject(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Execute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在当前请求的上下文中执行指定资源的处理程序，然后将执行返回给调用它的页。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Execute : string -&gt; unit" Usage="httpServerUtility.Execute path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要执行的 URL 路径。</param>
        <summary>在当前请求的上下文中执行指定虚拟路径的处理程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.Execute%2A>方法的新页的执行完成后继续执行原始页。 <xref:System.Web.HttpServerUtility.Transfer%2A>方法无条件地将执行转移到另一个处理程序。  
  
 ASP.NET 不会验证当前用户有权查看由提供的资源<xref:System.Web.HttpServerUtility.Execute%2A>方法。 尽管 ASP.NET 授权和身份验证逻辑运行于调用原始资源处理程序之前，ASP.NET 将直接调用所指示的处理程序<xref:System.Web.HttpServerUtility.Execute%2A>方法并不重新身份验证和授权逻辑运行的新资源。 如果应用程序的安全策略要求客户端具有适当的授权才能访问资源，应用程序应强制重新授权，或提供自定义访问控制机制。  
  
 可以使用强制重新授权<xref:System.Web.HttpResponse.Redirect%2A>方法而不是<xref:System.Web.HttpServerUtility.Execute%2A>方法。 <xref:System.Web.HttpResponse.Redirect%2A> 执行在其中浏览器请求新的资源的客户端的重定向。 由于此重定向是新的请求进入系统，它被受制于 Internet 信息服务 (IIS) 和 ASP.NET 安全策略的所有身份验证和授权逻辑。  
  
 你可以验证用户有权通过结合使用的自定义授权方法查看资源<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>方法之前的应用程序调用<xref:System.Web.HttpServerUtility.Execute%2A>方法。  
  
   
  
## Examples  
 下面的示例显示当前目录中的.aspx 页""。 显示 Updateinfo.aspx 页后，程序执行将返回到起始页。  
  
 [!code-csharp[Classic HttpServerUtility.Execute Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.Execute Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.Execute Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.Execute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">当前 <see cref="T:System.Web.HttpContext" /> 为 <see langword="null" />。  
  
- 或 - 
执行由 <paramref name="path" /> 指定的处理程序时发生错误。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="path" /> 并非虚拟路径。</exception>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Execute : string * bool -&gt; unit" Usage="httpServerUtility.Execute (path, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveForm" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="path">要执行的 URL 路径。</param>
        <param name="preserveForm">为 <see langword="true" />，则保留 <see cref="P:System.Web.HttpRequest.QueryString" /> 和 <see cref="P:System.Web.HttpRequest.Form" /> 集合；为 <see langword="false" />，则清除 <see cref="P:System.Web.HttpRequest.QueryString" /> 和 <see cref="P:System.Web.HttpRequest.Form" /> 集合。</param>
        <summary>在当前请求的上下文中执行指定虚拟路径的处理器，并指定是否清除 <see cref="P:System.Web.HttpRequest.QueryString" /> 和 <see cref="P:System.Web.HttpRequest.Form" /> 集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何执行.aspx 页`Updateinfo.aspx`中的当前请求和 preserve<xref:System.Web.HttpRequest.QueryString%2A>和<xref:System.Web.HttpRequest.Form%2A>集合。 程序执行将返回到起始页后`Updateinfo.aspx`显示。  
  
 [!code-csharp[HttpServerUtility.Execute#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpServerUtility.Execute/CS/httpserverutility.execute_cs.aspx#1)]
 [!code-vb[HttpServerUtility.Execute#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpServerUtility.Execute/VB/httpserverutility.execute_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">当前 <see cref="T:System.Web.HttpContext" /> 为 <see langword="null" />。  
  
- 或 - 
执行由 <paramref name="path" /> 指定的处理程序时发生错误。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="path" /> 并非虚拟路径。</exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path, System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path, class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String, writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path, System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.Execute : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.Execute (path, writer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="path">要执行的 URL 路径。</param>
        <param name="writer">要捕获输出的 <see cref="T:System.IO.TextWriter" />。</param>
        <summary>在当前请求的上下文中执行指定虚拟路径的处理程序。 <see cref="T:System.IO.TextWriter" /> 捕获执行的处理程序的输出。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.Execute%2A>方法指定的虚拟路径执行完成后继续执行原始请求。 <xref:System.Web.HttpServerUtility.Transfer%2A>方法无条件地将执行转移到另一个处理程序。  
  
 ASP.NET 不会验证当前用户有权查看由提供的资源<xref:System.Web.HttpServerUtility.Execute%2A>方法。 尽管 ASP.NET 授权和身份验证逻辑运行于调用原始资源处理程序之前，ASP.NET 将直接调用所指示的处理程序<xref:System.Web.HttpServerUtility.Execute%2A>方法并不重新身份验证和授权逻辑运行的新资源。 如果应用程序的安全策略要求客户端具有适当的授权才能访问资源，应用程序应强制重新授权，或提供自定义访问控制机制。  
  
 可以使用强制重新授权<xref:System.Web.HttpResponse.Redirect%2A>方法而不是<xref:System.Web.HttpServerUtility.Execute%2A>方法。 <xref:System.Web.HttpResponse.Redirect%2A> 执行在其中浏览器请求新的资源的客户端的重定向。 由于此重定向是新的请求进入系统，它被受制于 Internet 信息服务 (IIS) 和 ASP.NET 安全策略的所有身份验证和授权逻辑。  
  
 你可以验证用户有权通过结合使用的自定义授权方法查看资源<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>方法之前的应用程序调用<xref:System.Web.HttpServerUtility.Execute%2A>方法。  
  
   
  
## Examples  
 以下示例执行`Login.aspx`页上的当前目录中的服务器上并接收来自该网页通过输出<xref:System.IO.StringWriter>对象`writer`。 它将写入从收到的 HTML 流`writer`到 HTTP 输出流。  
  
 [!code-csharp[Classic HttpServerUtility.Execute1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.Execute1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.Execute1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.Execute1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">当前 <see cref="T:System.Web.HttpContext" /> 为 <see langword="null" />。  
  
- 或 - 
执行由 <paramref name="path" /> 指定的处理程序时发生错误。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="path" /> 并非虚拟路径。</exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path, System.IO.TextWriter writer, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path, class System.IO.TextWriter writer, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String, writer As TextWriter, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path, System::IO::TextWriter ^ writer, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Execute : string * System.IO.TextWriter * bool -&gt; unit" Usage="httpServerUtility.Execute (path, writer, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveForm" Type="System.Boolean" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="path">要执行的 URL 路径。</param>
        <param name="writer">要捕获输出的 <see cref="T:System.IO.TextWriter" />。</param>
        <param name="preserveForm">为 <see langword="true" />，则保留 <see cref="P:System.Web.HttpRequest.QueryString" /> 和 <see cref="P:System.Web.HttpRequest.Form" /> 集合；为 <see langword="false" />，则清除 <see cref="P:System.Web.HttpRequest.QueryString" /> 和 <see cref="P:System.Web.HttpRequest.Form" /> 集合。</param>
        <summary>在当前请求的上下文中执行指定虚拟路径的处理程序。 <see cref="T:System.IO.TextWriter" /> 捕获页面输出，布尔参数则指定是否清除 <see cref="P:System.Web.HttpRequest.QueryString" /> 和 <see cref="P:System.Web.HttpRequest.Form" /> 集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.Execute%2A>方法指定的虚拟路径执行完成后继续执行原始请求。 <xref:System.Web.HttpServerUtility.Transfer%2A>方法无条件地将执行转移到另一个处理程序。  
  
 ASP.NET 不会验证当前用户有权查看由提供的资源<xref:System.Web.HttpServerUtility.Execute%2A>方法。 尽管 ASP.NET 授权和身份验证逻辑运行于调用原始资源处理程序之前，ASP.NET 将直接调用所指示的处理程序<xref:System.Web.HttpServerUtility.Execute%2A>方法并不重新身份验证和授权逻辑运行的新资源。 如果应用程序的安全策略要求客户端具有适当的授权才能访问资源，应用程序应强制重新授权，或提供自定义访问控制机制。  
  
 可以使用强制重新授权<xref:System.Web.HttpResponse.Redirect%2A>方法而不是<xref:System.Web.HttpServerUtility.Execute%2A>方法。 <xref:System.Web.HttpResponse.Redirect%2A> 执行在其中浏览器请求新的资源的客户端的重定向。 由于此重定向是新的请求进入系统，它被受制于 Internet 信息服务 (IIS) 和 ASP.NET 安全策略的所有身份验证和授权逻辑。  
  
 你可以验证用户有权通过结合使用的自定义授权方法查看资源<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>方法之前的应用程序调用<xref:System.Web.HttpServerUtility.Execute%2A>方法。  
  
   
  
## Examples  
 以下示例执行`Login.aspx`页上的当前目录中的服务器上并接收来自该网页通过输出<xref:System.IO.StringWriter>对象`writer`。 它将写入从收到的 HTML 流`writer`到 HTTP 输出流。 内容<xref:System.Web.HttpRequest.Form%2A>和<xref:System.Web.HttpRequest.QueryString%2A>保留集合。  
  
 [!code-csharp[HttpServerUtility.Execute02#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpServerUtility.Execute02/CS/httpserverutility.execute02_cs.aspx#1)]
 [!code-vb[HttpServerUtility.Execute02#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpServerUtility.Execute02/VB/httpserverutility.execute02_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">当前 <see cref="T:System.Web.HttpContext" /> 为 NULL 引用（Visual Basic 中为 <see langword="Nothing" />）。  
  
- 或 - 
 <paramref name="path" /> 以句点 (.) 结尾。  
  
- 或 - 
执行由 <paramref name="path" /> 指定的处理程序时发生错误。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 并非虚拟路径。</exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (System.Web.IHttpHandler handler, System.IO.TextWriter writer, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(class System.Web.IHttpHandler handler, class System.IO.TextWriter writer, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.Web.IHttpHandler,System.IO.TextWriter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (handler As IHttpHandler, writer As TextWriter, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Web::IHttpHandler ^ handler, System::IO::TextWriter ^ writer, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Execute : System.Web.IHttpHandler * System.IO.TextWriter * bool -&gt; unit" Usage="httpServerUtility.Execute (handler, writer, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Web.IHttpHandler" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveForm" Type="System.Boolean" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler">实现 <see cref="T:System.Web.IHttpHandler" /> 以便向其传输当前请求的 HTTP 处理程序。</param>
        <param name="writer">要捕获输出的 <see cref="T:System.IO.TextWriter" />。</param>
        <param name="preserveForm">为 <see langword="true" />，则保留 <see cref="P:System.Web.HttpRequest.QueryString" /> 和 <see cref="P:System.Web.HttpRequest.Form" /> 集合；为 <see langword="false" />，则清除 <see cref="P:System.Web.HttpRequest.QueryString" /> 和 <see cref="P:System.Web.HttpRequest.Form" /> 集合。</param>
        <summary>在当前请求的上下文中执行指定虚拟路径的处理程序。 <see cref="T:System.IO.TextWriter" /> 捕获执行的处理程序的输出，布尔参数则指定是否清除 <see cref="P:System.Web.HttpRequest.QueryString" /> 和 <see cref="P:System.Web.HttpRequest.Form" /> 集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以编写自定义 HTTP 处理程序来处理特定的预定义任何的类型语言都是符合公共语言规范 (CLS) 中的 HTTP 请求。 而不是传统的 ASP (也称为经典 ASP) 页或 ASP.NET 页的 HTTP 处理程序类中定义的可执行代码对这些特定请求做出响应。 HTTP 处理程序允许与的低级别的请求和响应服务正在运行 Internet 信息服务 (IIS) Web 服务器进行交互和它们提供类似的功能于 ISAPI 扩展，但有一个更简单的编程模型。  
  
 ASP.NET 不会验证当前用户有权查看的资源，则由传送<xref:System.Web.HttpServerUtility.Execute%2A>方法。 尽管 ASP.NET 授权和身份验证逻辑运行于调用原始资源处理程序之前，ASP.NET 将直接调用的处理程序将由<xref:System.Web.HttpServerUtility.Execute%2A>方法并不重新运行用于身份验证和授权逻辑新资源。 如果你的应用程序的安全策略要求客户端具有适当的授权才能获得访问资源的权限，应用程序应强制重新授权或提供自定义访问控制机制。  
  
 可以使用强制重新授权<xref:System.Web.HttpResponse.Redirect%2A>方法而不是<xref:System.Web.HttpServerUtility.Execute%2A>方法。 <xref:System.Web.HttpResponse.Redirect%2A>执行在其中浏览器请求新的资源的客户端的重定向。 由于此重定向是新的请求进入系统，它会对进行了 IIS 和 ASP.NET 的安全策略的所有身份验证和授权逻辑。  
  
 你可以验证用户有权通过结合使用的自定义授权方法查看资源<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>方法之前的应用程序调用<xref:System.Web.HttpServerUtility.Execute%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">执行由 <paramref name="handler" /> 指定的处理程序时发生错误。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="handler" /> 参数为 <see langword="null" />。</exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="GetLastError">
      <MemberSignature Language="C#" Value="public Exception GetLastError ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Exception GetLastError() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.GetLastError" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLastError () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetLastError();" />
      <MemberSignature Language="F#" Value="member this.GetLastError : unit -&gt; Exception" Usage="httpServerUtility.GetLastError " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回前一个异常。</summary>
        <returns>引发的前一个异常。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例将打印到 HTTP 输出流的应用程序的最后一个错误的说明。 如果在不遇到任何错误，会输出"无错误"。  
  
 [!code-csharp[Classic HttpServerUtility.GetLastError Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.GetLastError Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.GetLastError Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.GetLastError Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpServerUtility.ClearError" />
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlDecode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>对已被编码以消除无效 HTML 字符的字符串进行解码。  
  
若要对 Web 应用程序之外的值进行编码或解码，请使用 <see cref="T:System.Net.WebUtility" /> 类。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="public string HtmlDecode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string HtmlDecode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function HtmlDecode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ HtmlDecode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.HtmlDecode : string -&gt; string" Usage="httpServerUtility.HtmlDecode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">要解码的 HTML 字符串。</param>
        <summary>对 HTML 编码的字符串进行解码，并返回已解码的字符串。</summary>
        <returns>已解码的文本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 编码可确保文本是在浏览器中正确显示，不会被解释为 html 格式浏览器。 例如，如果文本字符串包含小于号 (\<) 或更高版本浏览器不是号 (>)，会将这些字符解释为左或右括号之间的 HTML 标记。 HTML 编码的字符时，它们将转换为字符串`&lt;`和`&gt;`，这会导致浏览器显示小于号和大于号正确。 <xref:System.Web.HttpServerUtility.HtmlDecode%2A> 解码已传输到服务器的文本。  
  
 此方法是方便地访问<xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType>方法在运行时从 ASP.NET 应用程序。 在内部，此方法使用<xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType>来对字符串进行解码。  
  
 在代码隐藏文件中的 ASP.NET web 页，访问的实例<xref:System.Web.HttpServerUtility>类通过`Server`属性。 在不是代码隐藏文件中的类，使用`HttpContext.Current.Server`若要访问的实例<xref:System.Web.HttpServerUtility>类。  
  
 在 web 应用程序，外部使用<xref:System.Net.WebUtility>类进行编码或解码的值。  
  
   
  
## Examples  
 下面的示例包含的函数`LoadDecodedFile`，这对文件中的数据进行解码并将其复制到一个字符串。  
  
 [!code-aspx-csharp[Classic HttpServerUtility.HtmlDecode Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic HttpServerUtility.HtmlDecode Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="public void HtmlDecode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HtmlDecode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub HtmlDecode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void HtmlDecode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.HtmlDecode : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.HtmlDecode (s, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s">要解码的 HTML 字符串。</param>
        <param name="output"><see cref="T:System.IO.TextWriter" /> 输出包含已解码字符串的流。</param>
        <summary>对 HTML 编码的字符串进行解码，并将结果输出发送到 <see cref="T:System.IO.TextWriter" /> 输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 编码可确保文本是在浏览器中正确显示，不会被解释为 html 格式浏览器。 例如，如果文本字符串包含小于号 (\<) 或更高版本浏览器不是号 (>)，会将这些字符解释为左或右括号之间的 HTML 标记。 HTML 编码的字符时，它们将转换为字符串`&lt;`和`&gt;`，这会导致浏览器显示小于号和大于号正确。  
  
 <xref:System.Web.HttpServerUtility.HtmlDecode%2A> 解码已传输到服务器的文本。  
  
 <xref:System.Web.HttpServerUtility.HtmlDecode%2A> 为方便地访问<xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType>方法在运行时从 ASP.NET 应用程序。 在内部，<xref:System.Web.HttpServerUtility.HtmlDecode%2A>使用<xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType>来对字符串进行解码。  
  
 若要对 Web 应用程序之外的值进行编码或解码，请使用 <xref:System.Net.WebUtility> 类。  
  
   
  
## Examples  
 下面的示例将对已被 HTML 编码以便传输通过 HTTP 的字符串进行解码。 它对名为所提供的字符串进行解码`EncodedString`其中包含文本"这是&lt;测试字符串&gt;。"，并将其复制到名为字符串`DecodedString`作为"这是\<测试字符串 >。"。  
  
 [!code-csharp[Classic HttpServerUtility.HtmlDecode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.HtmlDecode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>对要在浏览器中显示的字符串进行编码。  
  
若要对 Web 应用程序之外的值进行编码或解码，请使用 <see cref="T:System.Net.WebUtility" /> 类。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public string HtmlEncode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string HtmlEncode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function HtmlEncode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ HtmlEncode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.HtmlEncode : string -&gt; string" Usage="httpServerUtility.HtmlEncode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">要编码的文本字符串。</param>
        <summary>对字符串进行 HTML 编码并返回已编码的字符串。</summary>
        <returns>HTML 编码的文本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 编码可确保文本是在浏览器中正确显示，不会被解释为 html 格式浏览器。 例如，如果文本字符串包含小于号 (\<) 或更高版本浏览器不是号 (>)，会将这些字符解释为左或右括号之间的 HTML 标记。 HTML 编码的字符时，它们将转换为字符串`&lt;`和`&gt;`，这会导致浏览器显示小于号和大于号正确。  
  
 此方法是方便地访问<xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType>方法在运行时从 ASP.NET 应用程序。 在内部，此方法使用<xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType>对字符串进行编码。  
  
 在代码隐藏文件中的 ASP.NET web 页，访问的实例<xref:System.Web.HttpServerUtility>类通过`Server`属性。 在不是代码隐藏文件中的类，使用`HttpContext.Current.Server`若要访问的实例<xref:System.Web.HttpServerUtility>类。  
  
 在 web 应用程序，外部使用<xref:System.Net.WebUtility>类进行编码或解码的值。  
  
   
  
## Examples  
 下面的示例演示如何为一个值进行 HTML 编码的潜在代码不安全代码。 代码驻留在 web 页的代码隐藏文件。 要编码的值是硬编码在此示例中仅以简化该示例并显示值的类型可能进行 HTML 编码。 通常情况下，你将进行 HTML 编码一个值，从用户或请求接收该值。 `Result` 是指`Literal`控件。  
  
 [!code-csharp[System.Web.HttpServerUtility.HtmlEncode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.HtmlEncode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/vb/default.aspx.vb#1)]  
  
 下一个示例是上一个示例类似，但它显示的是如何进行 HTML 编码类中的值不在代码隐藏文件。  
  
 [!code-csharp[System.Web.HttpServerUtility.HtmlEncode#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.HtmlEncode#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public void HtmlEncode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HtmlEncode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub HtmlEncode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void HtmlEncode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.HtmlEncode (s, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s">要编码的字符串。</param>
        <param name="output"><see cref="T:System.IO.TextWriter" /> 输出包含已编码字符串的流。</param>
        <summary>对字符串进行 HTML 解码，并将结果输出发送到 <see cref="T:System.IO.TextWriter" /> 输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 编码可确保将在浏览器中，不会被解释为 html 格式浏览器中正确显示文本。 例如，如果文本字符串包含小于号 (\<) 或更高版本浏览器不是号 (>)，会将这些字符解释为一个开始标记或右括号之间的 HTML 标记。 这两个字符的 HTML 编码`&lt;`和`&gt;`分别，这会导致浏览器显示小于号和大于号正确。  
  
 <xref:System.Web.HttpServerUtility.HtmlEncode%2A> 为方便地访问<xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType>方法在运行时从 ASP.NET 应用程序。 在内部，<xref:System.Web.HttpServerUtility.HtmlEncode%2A>使用<xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType>对字符串进行编码。  
  
 若要对 Web 应用程序之外的值进行编码或解码，请使用 <xref:System.Net.WebUtility> 类。  
  
   
  
## Examples  
 下面的示例将编码用于通过 HTTP 传输的字符串。 它对名为的字符串进行编码`TestString`，其中包含文本"这是\<测试字符串 >。"，并将其复制到名为的字符串`EncodedString`作为"这是&lt;测试字符串&gt;。"。  
  
 [!code-csharp[Classic HttpServerUtility.HtmlEncode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlEncode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.HtmlEncode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlEncode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpServerUtility.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string" Usage="System.Web.HttpServerUtility.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取服务器的计算机名称。</summary>
        <value>本地计算机的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例将服务器的计算机名称存储为字符串变量。  
  
 [!code-csharp[Classic HttpServerUtility.MachineName Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.MachineName Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.MachineName Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.MachineName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">无法找到该计算机名称。</exception>
      </Docs>
    </Member>
    <Member MemberName="MapPath">
      <MemberSignature Language="C#" Value="public string MapPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string MapPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.MapPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function MapPath (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ MapPath(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.MapPath : string -&gt; string" Usage="httpServerUtility.MapPath path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Web 应用程序中的虚拟路径。</param>
        <summary>返回与指定虚拟路径相对应的物理文件路径。</summary>
        <returns>对应于 <paramref name="path" /> 的 Web 服务器上的物理文件路径。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`path`是`null`，则<xref:System.Web.HttpServerUtility.MapPath%2A>方法返回包含当前请求路径的目录的完整物理路径。 相对路径不需要指定现有的文件或文件夹的此方法以返回一个值。 但是，不能指定 Web 应用程序之外的路径。  
  
> [!IMPORTANT]
>  <xref:System.Web.HttpServerUtility.MapPath%2A>方法可能包含敏感信息的宿主环境。 返回值不应显示给用户。  
  
 Web 应用程序驻留在`C:\ExampleSites\TestMapPath`将返回以下结果：  
  
|从请求|`path`|返回值|  
|------------------|------------|--------------------|  
|RootLevelPage.aspx|`null`|C:\ExampleSites\TestMapPath|  
|RootLevelPage.aspx|"/DownOneLevel/DownLevelPage.aspx"|C:\ExampleSites\TestMapPath\DownOneLevel\DownLevelPage.aspx|  
|RootLevelPage.aspx|"/NotRealFolder"|C:\ExampleSites\TestMapPath\NotRealFolder|  
|RootLevelPage.aspx|"../ OutsideApplication"|<xref:System.Web.HttpException>|  
|/DownOneLevel/DownLevelPage.aspx|`null`|C:\ExampleSites\TestMapPath\DownOneLevel|  
|/DownOneLevel/DownLevelPage.aspx|"../RootLevelPage.aspx"|C:\ExampleSites\TestMapPath\RootLevelPage.aspx|  
  
   
  
## Examples  
 下面的示例演示如何检索的物理文件的相对虚拟路径。 代码驻留在 web 页的代码隐藏文件，并利用默认`Server`对象。  
  
 [!code-csharp[System.Web.HttpServerUtility.MapPath#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.mappath/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.MapPath#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.mappath/vb/default.aspx.vb#1)]  
  
 下一个示例非常相似与前面的示例，但它演示如何检索中的类中不是代码隐藏文件中的物理路径。  
  
 [!code-csharp[System.Web.HttpServerUtility.MapPath#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.mappath/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.MapPath#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.mappath/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">当前 <see cref="T:System.Web.HttpContext" /> 为 <see langword="null" />。
        
- 或 - 
<paramref name="path" /> 是物理路径，但应为虚拟路径。</exception>
      </Docs>
    </Member>
    <Member MemberName="ScriptTimeout">
      <MemberSignature Language="C#" Value="public int ScriptTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScriptTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpServerUtility.ScriptTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ScriptTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ScriptTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ScriptTimeout : int with get, set" Usage="System.Web.HttpServerUtility.ScriptTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置请求超时值（以秒为单位）。</summary>
        <value>请求的超时值设置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.ScriptTimeout%2A>属性可以通过设置 Web.config 文件中设置`executionTimeout`的属性[httpRuntime](https://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369)元素。 以编程方式使用超时值设置<xref:System.Web.HttpServerUtility.ScriptTimeout%2A>属性优先于 Web.config 设置。  
  
> [!NOTE]
>  如果您设置`debug`的属性[httpRuntime](https://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369)元素`true`在 Web.config 文件中，值<xref:System.Web.HttpServerUtility.ScriptTimeout%2A>将被忽略。  
  
   
  
## Examples  
 下面的示例将请求超时期限设置为 60 秒。  
  
 [!code-csharp[Classic HttpServerUtility.ScriptTimeout Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.ScriptTimeout Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.ScriptTimeout Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.ScriptTimeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">当前 <see cref="T:System.Web.HttpContext" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">超时期限为 <see langword="null" /> 或未能设置。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transfer">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>终止当前页的执行，并为当前请求开始执行新页。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transfer(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Transfer(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transfer (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transfer(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Transfer : string -&gt; unit" Usage="httpServerUtility.Transfer path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">服务器上要执行的新页的 URL 路径。</param>
        <summary>对于当前请求，终止当前页的执行，并使用指定的页 URL 路径来开始执行一个新页。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 传输到的页面应为另一个.aspx 页面。 例如，传输到相应的.asp 或.asmx 页不是有效的。 <xref:System.Web.HttpServerUtility.Transfer%2A>方法会保留<xref:System.Web.HttpRequest.QueryString%2A>和<xref:System.Web.HttpRequest.Form%2A>集合。  
  
 <xref:System.Web.HttpServerUtility.Transfer%2A> 调用<xref:System.Web.HttpResponse.End%2A>，该类会引发<xref:System.Threading.ThreadAbortException>完成后的异常。  
  
 ASP.NET 不会验证当前用户有权查看由提供的资源<xref:System.Web.HttpServerUtility.Transfer%2A>方法。 尽管 ASP.NET 授权和身份验证逻辑运行于调用原始资源处理程序之前，ASP.NET 将直接调用所指示的处理程序<xref:System.Web.HttpServerUtility.Transfer%2A>方法并不重新身份验证和授权逻辑运行的新资源。 如果应用程序的安全策略要求客户端具有适当的授权才能访问资源，应用程序应强制重新授权，或提供自定义访问控制机制。  
  
 可以使用强制重新授权<xref:System.Web.HttpResponse.Redirect%2A>方法而不是<xref:System.Web.HttpServerUtility.Transfer%2A>方法。 <xref:System.Web.HttpResponse.Redirect%2A>方法执行在其中浏览器请求新的资源的客户端的重定向。 由于此重定向是新的请求进入系统，它被受制于 Internet 信息服务 (IIS) 和 ASP.NET 安全策略的所有身份验证和授权逻辑。  
  
 你可以验证用户有权通过结合使用的自定义授权方法查看资源<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>方法之前的应用程序调用<xref:System.Web.HttpServerUtility.Transfer%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (string path, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transfer(string path, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Transfer(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transfer (path As String, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transfer(System::String ^ path, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Transfer : string * bool -&gt; unit" Usage="httpServerUtility.Transfer (path, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">服务器上要执行的新页的 URL 路径。</param>
        <param name="preserveForm">为 <see langword="true" />，则保留 <see cref="P:System.Web.HttpRequest.QueryString" /> 和 <see cref="P:System.Web.HttpRequest.Form" /> 集合；为 <see langword="false" />，则清除 <see cref="P:System.Web.HttpRequest.QueryString" /> 和 <see cref="P:System.Web.HttpRequest.Form" /> 集合。</param>
        <summary>终止当前页的执行，并使用指定的页 URL 路径来开始执行一个新页。 指定是否清除 <see cref="P:System.Web.HttpRequest.QueryString" /> 和 <see cref="P:System.Web.HttpRequest.Form" /> 集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 传输到的页面应为另一个.aspx 页面。 例如，传输到相应的.asp 或.asmx 页不是有效的。  
  
 <xref:System.Web.HttpServerUtility.Transfer%2A> 调用<xref:System.Web.HttpResponse.End%2A>，该类会引发<xref:System.Threading.ThreadAbortException>完成后的异常。  
  
 如果您设置`preserveForm`参数`true`，目标页将能够通过使用访问前一页的视图状态<xref:System.Web.UI.Page.PreviousPage%2A>属性。  
  
 出于安全目的，您应保留`enableViewStateMac`属性设置为`true`。 ASP.NET 不会验证当前用户有权查看由提供的资源<xref:System.Web.HttpServerUtility.Transfer%2A>方法。 尽管 ASP.NET 授权和身份验证逻辑运行于调用原始资源处理程序之前，ASP.NET 将直接调用所指示的处理程序<xref:System.Web.HttpServerUtility.Transfer%2A>方法并不重新身份验证和授权逻辑运行的新资源。 如果应用程序的安全策略要求客户端具有适当的授权才能访问资源，应用程序应强制重新授权，或提供自定义访问控制机制。  
  
 可以使用强制重新授权<xref:System.Web.HttpResponse.Redirect%2A>方法而不是<xref:System.Web.HttpServerUtility.Transfer%2A>方法。 <xref:System.Web.HttpResponse.Redirect%2A>方法执行在其中浏览器请求新的资源的客户端的重定向。 由于此重定向是新的请求进入系统，它被受制于 Internet 信息服务 (IIS) 和 ASP.NET 安全策略的所有身份验证和授权逻辑。  
  
 你可以验证用户有权通过结合使用的自定义授权方法查看资源<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>方法之前的应用程序调用<xref:System.Web.HttpServerUtility.Transfer%2A>方法。  
  
   
  
## Examples  
 下面的示例执行一个新页作为当前页的相同目录中。  
  
 [!code-csharp[Classic HttpServerUtility.Transfer Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.Transfer Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.Transfer Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.Transfer Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">当前页请求为回调。</exception>
      </Docs>
    </Member>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (System.Web.IHttpHandler handler, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transfer(class System.Web.IHttpHandler handler, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Transfer(System.Web.IHttpHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transfer (handler As IHttpHandler, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transfer(System::Web::IHttpHandler ^ handler, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Transfer : System.Web.IHttpHandler * bool -&gt; unit" Usage="httpServerUtility.Transfer (handler, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Web.IHttpHandler" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveForm" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler">实现 <see cref="T:System.Web.IHttpHandler" /> 以便向其传输当前请求的 HTTP 处理程序。</param>
        <param name="preserveForm">为 <see langword="true" />，则保留 <see cref="P:System.Web.HttpRequest.QueryString" /> 和 <see cref="P:System.Web.HttpRequest.Form" /> 集合；为 <see langword="false" />，则清除 <see cref="P:System.Web.HttpRequest.QueryString" /> 和 <see cref="P:System.Web.HttpRequest.Form" /> 集合。</param>
        <summary>终止当前页的执行，然后使用实现 <see cref="T:System.Web.IHttpHandler" /> 接口的自定义 HTTP 处理程序开始新请求的执行，并指定是否清除 <see cref="P:System.Web.HttpRequest.QueryString" /> 和 <see cref="P:System.Web.HttpRequest.Form" /> 集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以编写自定义 HTTP 处理程序来处理特定的预定义任何的类型语言都是符合公共语言规范 (CLS) 中的 HTTP 请求。 而不是传统的 ASP (也称为经典 ASP) 页或 ASP.NET 页的 HTTP 处理程序类中定义的可执行代码对这些特定请求做出响应。 HTTP 处理程序允许与的低级别的请求和响应服务正在运行 Internet 信息服务 (IIS) Web 服务器进行交互和它们提供类似的功能于 ISAPI 扩展，但有一个更简单的编程模型。  
  
 如果您设置`preserveForm`参数`true`，目标页将能够通过使用访问前一页的视图状态<xref:System.Web.UI.Page.PreviousPage%2A>属性。  
  
 出于安全目的，您应保留`enableViewStateMac`属性设置为`true`。 ASP.NET 不会验证当前用户有权查看由提供的资源<xref:System.Web.HttpServerUtility.Transfer%2A>方法。 尽管 ASP.NET 授权和身份验证逻辑运行于调用原始资源处理程序之前，ASP.NET 将直接调用所指示的处理程序<xref:System.Web.HttpServerUtility.Transfer%2A>方法，并为新的重新运行任务序列执行身份验证和授权逻辑资源。 如果你的应用程序的安全策略要求客户端具有适当的授权才能访问资源，应用程序应强制重新授权或提供自定义访问控制机制。  
  
 可以使用强制重新授权<xref:System.Web.HttpResponse.Redirect%2A>方法而不是<xref:System.Web.HttpServerUtility.Transfer%2A>方法。 <xref:System.Web.HttpResponse.Redirect%2A>方法执行在其中浏览器请求新的资源的客户端的重定向。 由于此重定向是新的请求进入系统，它会对进行了 IIS 和 ASP.NET 的安全策略的所有身份验证和授权逻辑。  
  
 你可以验证用户有权通过结合使用的自定义授权方法查看资源<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>方法之前的应用程序调用<xref:System.Web.HttpServerUtility.Transfer%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">当前页请求为回调。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TransferRequest">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>异步执行指定的 URL。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.TransferRequest%2A> 在.NET Framework 版本 3.5 中引入。 有关.NET Framework 的摘要信息，请参阅[版本和依赖关系](~/docs/framework/migration-guide/versions-and-dependencies.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.TransferRequest : string -&gt; unit" Usage="httpServerUtility.TransferRequest path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="path">服务器上要执行的新页的 URL 路径。</param>
        <summary>异步执行指定的 URL。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法的重载<xref:System.Web.HttpServerUtility.TransferRequest%2A>重载，并`preserveForm`参数设置为`false`，则`method`参数设置为`null`，则`headers`参数设置为`null`，和`preserveUser`参数设置为`true`。 有关详细信息，请参阅中的"备注"部分<xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>重载。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">该请求需要 [!INCLUDE[iisver](~/includes/iisver-md.md)] 的集成管道模式。</exception>
        <exception cref="T:System.Web.HttpException">服务器无法用于处理请求。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 参数无效。</exception>
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.TransferRequest : string * bool -&gt; unit" Usage="httpServerUtility.TransferRequest (path, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveForm" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="path">服务器上要执行的新页的 URL 路径。</param>
        <param name="preserveForm">若要保留 <see cref="P:System.Web.HttpRequest.Form" /> 集合，则为 <see langword="true" />；若要清除 <see cref="P:System.Web.HttpRequest.Form" /> 集合，则为 <see langword="false" />。</param>
        <summary>异步执行指定的 URL 并保留查询字符串参数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载将调用<xref:System.Web.HttpServerUtility.TransferRequest%2A>重载，并`preserveForm`参数设置中，传递的值为`method`参数设置为`null`，则`headers`参数设置为`null`，和`preserveUser`参数集到`true`。 有关详细信息，请参阅中的"备注"部分<xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>。  
  
 <xref:System.Web.HttpServerUtility.TransferRequest%2A> 是.NET Framework 3.5 版中引入的。  有关详细信息，请参见[版本和依赖关系](~/docs/framework/migration-guide/versions-and-dependencies.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">该请求需要 [!INCLUDE[iisver](~/includes/iisver-md.md)] 的集成管道模式。</exception>
        <exception cref="T:System.Web.HttpException">服务器无法用于处理请求。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 参数无效。</exception>
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path, bool preserveForm, string method, System.Collections.Specialized.NameValueCollection headers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path, bool preserveForm, string method, class System.Collections.Specialized.NameValueCollection headers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String, preserveForm As Boolean, method As String, headers As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path, bool preserveForm, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ headers);" />
      <MemberSignature Language="F#" Value="member this.TransferRequest : string * bool * string * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="httpServerUtility.TransferRequest (path, preserveForm, method, headers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveForm" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="headers" Type="System.Collections.Specialized.NameValueCollection" Index="3" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="path">服务器上要执行的新页的 URL 路径。</param>
        <param name="preserveForm">若要保留 <see cref="P:System.Web.HttpRequest.Form" /> 集合，则为 <see langword="true" />；若要清除 <see cref="P:System.Web.HttpRequest.Form" /> 集合，则为 <see langword="false" />。</param>
        <param name="method">在执行新请求时使用的 HTTP 方法。</param>
        <param name="headers">用于新请求的请求标头的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>使用指定的 HTTP 方法和标头异步执行指定的 URL。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用中的集成的管道模式运行时使用此方法[!INCLUDE[iisver](~/includes/iisver-md.md)]以允许请求处理，以从一个资源类型传输到另一个执行目标请求与正确的请求上下文。 例如，可以使用<xref:System.Web.HttpServerUtility.TransferRequest%2A>方法传输到 XML 页的请求的 ASPX 页的请求。  
  
 <xref:System.Web.HttpServerUtility.TransferRequest%2A>方法执行异步子执行指定的 url 与以下条件：  
  
-   如果`path`参数指定的查询字符串，它将用作新的查询字符串。 如果包括任何查询字符串，不则该请求的查询字符串将重新使用。  
  
-   如果`method`指定参数，将使用它。 如果它是`null`，将使用原始请求的 HTTP 方法。  
  
-   如果`preserveForm`参数是`true`，当前的实体正文的请求将可供目标请求。 这使窗体发布，并将上传要在传输。  
  
-   如果对原始请求当前设置的用户标识，标识将传输到新的请求。 这样，经过身份验证的请求重复使用的身份验证的新请求的结果。 如果不希望要传输的用户，将用户设置为`null`传输之前对原始请求。  
  
-   如果`headers`指定参数时，新的请求将执行的指定标头。 这可用于修改请求标头和 cookie 用于新请求，或添加特殊的标头，指定原始请求的接收位置。  
  
     此方法调用<xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%2CSystem.Boolean%29>方法的重载`preserveUser`参数设置为`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">该请求要求在集成模式下运行的 [!INCLUDE[iisver](~/includes/iisver-md.md)]。</exception>
        <exception cref="T:System.Web.HttpException">服务器无法用于处理请求。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 参数无效。</exception>
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path, bool preserveForm, string method, System.Collections.Specialized.NameValueCollection headers, bool preserveUser);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path, bool preserveForm, string method, class System.Collections.Specialized.NameValueCollection headers, bool preserveUser) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String, preserveForm As Boolean, method As String, headers As NameValueCollection, preserveUser As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path, bool preserveForm, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ headers, bool preserveUser);" />
      <MemberSignature Language="F#" Value="member this.TransferRequest : string * bool * string * System.Collections.Specialized.NameValueCollection * bool -&gt; unit" Usage="httpServerUtility.TransferRequest (path, preserveForm, method, headers, preserveUser)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveForm" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="headers" Type="System.Collections.Specialized.NameValueCollection" Index="3" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveUser" Type="System.Boolean" Index="4" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="path">路径。</param>
        <param name="preserveForm">若要保留 <see cref="P:System.Web.HttpRequest.Form" /> 集合，则为 <see langword="true" />；若要清除 <see cref="P:System.Web.HttpRequest.Form" /> 集合，则为 <see langword="false" />。</param>
        <param name="method">要在新请求中使用的 HTTP 方法。</param>
        <param name="headers">一个包含用于新请求的请求标头的 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 对象。</param>
        <param name="preserveUser">若要保存用户标识，则为 <see langword="true" />；否则为 <see langword="false" />。 此方法的另一个方法重载调用此重载且将此参数设置为 <see langword="true" />。</param>
        <summary>用指定的 HTTP 方法、标头和路径，执行指定的 URL 上的异步执行和选择保留格式值和用户标识。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅中的"备注"部分<xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">该请求需要 [!INCLUDE[iisver](~/includes/iisver-md.md)] 的集成管道模式。</exception>
        <exception cref="T:System.Web.HttpException">服务器无法用于处理请求。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 参数无效。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UrlDecode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>对字符串进行解码，该字符串针对 HTTP 传输进行了编码并在 URL 中发送到服务器。  
  
若要对 Web 应用程序之外的值进行编码或解码，请使用 <see cref="T:System.Net.WebUtility" /> 类。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UrlDecode">
      <MemberSignature Language="C#" Value="public string UrlDecode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UrlDecode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UrlDecode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UrlDecode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.UrlDecode : string -&gt; string" Usage="httpServerUtility.UrlDecode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">要解码的文本字符串。</param>
        <summary>对字符串进行 URL 解码并返回已解码的字符串。</summary>
        <returns>已解码的文本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL 编码可确保所有浏览器会将 URL 字符串中的文本正确传输。 字符，如问题标记 （？）、 & 号 (&)、 斜杠标记 （/） 和空格可能会截断或某些浏览器已损坏。 因此，这些字符必须以编码`<a>`标记或在查询字符串的字符串可以重新发送请求字符串中的浏览器。  
  
 此方法是方便地访问<xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType>方法在运行时从 ASP.NET 应用程序。 在内部，此方法使用<xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType>来对字符串进行解码。  
  
 在代码隐藏文件中的 ASP.NET web 页，访问的实例<xref:System.Web.HttpServerUtility>类通过`Server`属性。 在不是代码隐藏文件中的类，使用`HttpContext.Current.Server`若要访问的实例<xref:System.Web.HttpServerUtility>类。  
  
 在 web 应用程序，外部使用<xref:System.Net.WebUtility>类进行编码或解码的值。  
  
   
  
## Examples  
 下面的示例演示如何对值进行 URL 解码，从查询字符串检索。 代码驻留在 web 页的代码隐藏文件。 `ReturnPage` 是指`HyperLink`控件。  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlDecode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.UrlDecode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/vb/default.aspx.vb#1)]  
  
 下一个示例是上一个示例类似，但它显示的是如何到进行 URL 解码值从类中的不是在代码隐藏文件中。  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlDecode#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.UrlDecode#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlDecode">
      <MemberSignature Language="C#" Value="public void UrlDecode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UrlDecode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UrlDecode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UrlDecode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.UrlDecode : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.UrlDecode (s, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s">要解码的 HTML 字符串。</param>
        <param name="output"><see cref="T:System.IO.TextWriter" /> 输出包含已解码字符串的流。</param>
        <summary>对在 URL 中接收的 HTML 字符串进行解码，并将结果输出发送到 <see cref="T:System.IO.TextWriter" /> 输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL 编码可确保所有浏览器会将 URL 字符串中的文本正确传输。 字符，如问题标记 （？）、 & 号 (&)、 斜杠标记 （/） 和空格可能会截断或某些浏览器已损坏。 因此，这些字符必须以编码`<a>`标记或在查询字符串的字符串可以重新发送请求字符串中的浏览器。  
  
 <xref:System.Web.HttpServerUtility.UrlDecode%2A> 为方便地访问<xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType>方法在运行时从 ASP.NET 应用程序。 在内部，<xref:System.Web.HttpServerUtility.UrlDecode%2A>使用<xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType>来对字符串进行解码。  
  
 若要对 Web 应用程序之外的值进行编码或解码，请使用 <xref:System.Net.WebUtility> 类。  
  
   
  
## Examples  
 下面的示例对名为的字符串进行解码`EncodedString`（在 URL 中接收） 到名为的字符串`DecodedString`。  
  
 [!code-csharp[Classic HttpServerUtility.UrlDecode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.UrlDecode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.UrlDecode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.UrlDecode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UrlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>编码字符串，以便通过 URL 从 Web 服务器到客户端进行可靠的 HTTP 传输。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.UrlEncode%2A> 为方便地访问<xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType>方法在运行时从 ASP.NET 应用程序。 在内部，<xref:System.Web.HttpServerUtility.UrlEncode%2A>使用<xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType>对字符串进行编码。  
  
 若要对 Web 应用程序之外的值进行编码或解码，请使用 <xref:System.Net.WebUtility> 类。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public string UrlEncode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UrlEncode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UrlEncode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UrlEncode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.UrlEncode : string -&gt; string" Usage="httpServerUtility.UrlEncode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">要进行 URL 编码的文本。</param>
        <summary>对字符串进行 URL 编码，并返回已编码的字符串。</summary>
        <returns>URL 编码的文本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL 编码可确保所有浏览器会将 URL 字符串中的文本正确传输。 字符，如问题标记 （？）、 & 号 (&)、 斜杠标记 （/） 和空格可能会截断或某些浏览器已损坏。 因此，这些字符必须以编码`<a>`标记或在查询字符串的字符串可以重新发送请求字符串中的浏览器。  
  
 此方法是方便地访问<xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType>方法在运行时从 ASP.NET 应用程序。 在内部，此方法使用<xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType>对字符串进行编码。  
  
 在代码隐藏文件中的 ASP.NET web 页，访问的实例<xref:System.Web.HttpServerUtility>类通过`Server`属性。 在不是代码隐藏文件中的类，使用`HttpContext.Current.Server`若要访问的实例<xref:System.Web.HttpServerUtility>类。  
  
 在 web 应用程序，外部使用<xref:System.Net.WebUtility>类进行编码或解码的值。  
  
   
  
## Examples  
 下面的示例演示如何为一个值进行 URL 编码，可作为超链接的查询字符串值。 代码驻留在 web 页的代码隐藏文件。 要编码的值是硬编码在此示例中仅以简化该示例并显示值的类型可能进行 URL 编码。 通常情况下，你将进行 URL 编码值，你收到了从用户或请求。 `NextPage` 是指`HyperLink`控件。  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlEncode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.UrlEncode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/vb/default.aspx.vb#1)]  
  
 下一个示例是上一个示例类似，但它显示的是如何进行 URL 编码值从类中的不是在代码隐藏文件中。  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlEncode#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.UrlEncode#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public void UrlEncode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UrlEncode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UrlEncode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UrlEncode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.UrlEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.UrlEncode (s, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s">要编码的文本字符串。</param>
        <param name="output"><see cref="T:System.IO.TextWriter" /> 输出包含已编码字符串的流。</param>
        <summary>对字符串进行 URL 编码，并将结果输出发送到 <see cref="T:System.IO.TextWriter" /> 输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL 编码可确保所有浏览器会将 URL 字符串中的文本正确传输。 字符，如问题标记 （？）、 & 号 (&)、 斜杠标记 （/） 和空格可能会截断或某些浏览器已损坏。 因此，这些字符必须以编码`<a>`标记或在查询字符串的字符串可以重新发送请求字符串中的浏览器。  
  
 <xref:System.Web.HttpServerUtility.UrlEncode%2A> 为方便地访问<xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType>方法在运行时从 ASP.NET 应用程序。 在内部，<xref:System.Web.HttpServerUtility.UrlEncode%2A>使用<xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType>对字符串进行编码。  
  
 若要对 Web 应用程序之外的值进行编码或解码，请使用 <xref:System.Net.WebUtility> 类。  
  
   
  
## Examples  
 下面的示例将编码用于通过 HTTP 传输的字符串。 它对名为的字符串进行编码`TestString`，其中包含文本"这是\<测试字符串 >。"，并将其复制到名为的字符串`EncodedString`为"此 + 是 + + %3ctest + 字符串 %3e。"。  
  
 [!code-csharp[Classic HttpServerUtility.UrlEncode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.UrlEncode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.UrlEncode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.UrlEncode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="public string UrlPathEncode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UrlPathEncode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UrlPathEncode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UrlPathEncode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.UrlPathEncode : string -&gt; string" Usage="httpServerUtility.UrlPathEncode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">要进行 URL 编码的文本。</param>
        <summary>请勿使用；仅适用于浏览器兼容性。 请使用 <see cref="M:System.Web.HttpServerUtility.UrlEncode(System.String)" />。</summary>
        <returns>URL 已编码的文本。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlTokenDecode">
      <MemberSignature Language="C#" Value="public static byte[] UrlTokenDecode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] UrlTokenDecode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlTokenDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlTokenDecode (input As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ UrlTokenDecode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member UrlTokenDecode : string -&gt; byte[]" Usage="System.Web.HttpServerUtility.UrlTokenDecode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="input">要解码的 URL 字符串标记。</param>
        <summary>将 URL 字符串标记解码为使用 64 进制数字的等效字节数组。</summary>
        <returns>包含解码后的 URL 字符串标记的字节数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.UrlTokenDecode%2A>方法将 URL 字符串标记，它将二进制数据编码为 base 64 数字，转换为其等效的字节数组表示形式。 使用<xref:System.Web.HttpServerUtility.UrlTokenDecode%2A>方法以解码令牌在 URL 中传输和编码使用<xref:System.Web.HttpServerUtility.UrlTokenEncode%2A>。  
  
 <xref:System.Web.HttpServerUtility.UrlTokenDecode%2A>方法将返回一个空字节数组，如果`input`参数的长度为小于一。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 参数的值为 <see langword="null" />。</exception>
        <altmember cref="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Web.HttpServerUtility.UrlTokenEncode(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="UrlTokenEncode">
      <MemberSignature Language="C#" Value="public static string UrlTokenEncode (byte[] input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlTokenEncode(unsigned int8[] input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlTokenEncode(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlTokenEncode (input As Byte()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlTokenEncode(cli::array &lt;System::Byte&gt; ^ input);" />
      <MemberSignature Language="F#" Value="static member UrlTokenEncode : byte[] -&gt; string" Usage="System.Web.HttpServerUtility.UrlTokenEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Byte[]" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="input">要编码的字节数组。</param>
        <summary>将一个字节数组编码为使用 Base 64 编码方案的等效字符串表示形式，Base 64 是一种适于通过 URL 传输数据的编码方案。</summary>
        <returns>如果字节数组的长度大于 1，则为包含编码后的标记的字符串；否则为空字符串 ("")。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.UrlTokenEncode%2A>方法将使用 base 64 数字编码的等效字符串表示形式转换为字节数组。 可以在 URL 中传输生成的字符串标记。  
  
 <xref:System.Web.HttpServerUtility.UrlTokenEncode%2A>将返回空字符串，如果`input`参数的长度为小于一。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 参数的值为 <see langword="null" />。</exception>
        <altmember cref="M:System.Convert.ToBase64String(System.Byte[])" />
        <altmember cref="M:System.Web.HttpServerUtility.UrlTokenDecode(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>