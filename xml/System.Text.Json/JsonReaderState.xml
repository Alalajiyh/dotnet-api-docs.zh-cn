<Type Name="JsonReaderState" FullName="System.Text.Json.JsonReaderState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="134658575824ec7ab34ef310d545b4b8914b9306" /><Meta Name="ms.sourcegitcommit" Value="ef1f0c8985003a14413f66c3de381b8f3b6e4436" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/30/2019" /><Meta Name="ms.locfileid" Value="66380644" /></Metadata><TypeSignature Language="C#" Value="public struct JsonReaderState" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonReaderState extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonReaderState" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonReaderState" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonReaderState" />
  <TypeSignature Language="F#" Value="type JsonReaderState = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="60bbb-101">定义一个不透明类型，用于保留和保存所有相关的状态信息，这些信息必须提供给 <see cref="T:System.Text.Json.Utf8JsonReader" />，以便在处理不完整的数据后继续进行读取。</span><span class="sxs-lookup"><span data-stu-id="60bbb-101">Defines an opaque type that holds and saves all the relevant state information, which must be provided to the <see cref="T:System.Text.Json.Utf8JsonReader" /> to continue reading after processing incomplete data.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="60bbb-102">`JsonReaderState` 需要以支持可重入性时读取不完整的数据，并提供更多的数据后，请继续阅读。</span><span class="sxs-lookup"><span data-stu-id="60bbb-102">`JsonReaderState` is required to support reentrancy when reading incomplete data, and to continue reading once more data is available.</span></span> <span data-ttu-id="60bbb-103">与不同<xref:System.Text.Json.Utf8JsonReader>结构，哪个是 ref 结构、 此类型可以经受得住跨异步/等待边界，因此需要为异步读取更多的数据，然后才能继续进行的新实例提供支持<xref:System.Text.Json.Utf8JsonReader>。</span><span class="sxs-lookup"><span data-stu-id="60bbb-103">Unlike the <xref:System.Text.Json.Utf8JsonReader> struct, which is a ref struct, this type can survive across async/await boundaries, and hence it's required to provide support for reading more data asynchronously before continuing with a new instance of the <xref:System.Text.Json.Utf8JsonReader>.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonReaderState (System.Text.Json.JsonReaderOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Text.Json.JsonReaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional options As JsonReaderOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.JsonReaderState : System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonReaderState" Usage="new System.Text.Json.JsonReaderState options" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="60bbb-104">定义 <see cref="T:System.Text.Json.Utf8JsonReader" /> 的自定义行为，它不同于 JSON RFC（例如，处理注释的方式，或读取时允许的最大深度）。</span><span class="sxs-lookup"><span data-stu-id="60bbb-104">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonReader" /> that is different from the JSON RFC (for example how to handle comments, or the maximum depth allowed when reading).</span></span> <span data-ttu-id="60bbb-105">默认情况下，<see cref="T:System.Text.Json.Utf8JsonReader" /> 严格遵循 JSON RFC（JSON 中的注释无效）且读取的最大深度为 64。</span><span class="sxs-lookup"><span data-stu-id="60bbb-105">By default, the <see cref="T:System.Text.Json.Utf8JsonReader" /> follows the JSON RFC strictly (comments within the JSON are invalid) and reads up to a maximum depth of 64.</span></span></param>
        <summary><span data-ttu-id="60bbb-106">构造新的 <see cref="T:System.Text.Json.JsonReaderState" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="60bbb-106">Constructs a new <see cref="T:System.Text.Json.JsonReaderState" /> instance.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="60bbb-107">必须将此状态的实例传递给<xref:System.Text.Json.Utf8JsonReader>构造函数使用的 JSON 数据。</span><span class="sxs-lookup"><span data-stu-id="60bbb-107">An instance of this state must be passed to the <xref:System.Text.Json.Utf8JsonReader> constructor with the JSON data.</span></span> <span data-ttu-id="60bbb-108">与不同<xref:System.Text.Json.Utf8JsonReader>，这是 ref 结构时，状态可以经受跨异步/等待边界，因此需要此类型提供支持的更多数据然后再继续进行的新实例以异步方式读取<xref:System.Text.Json.Utf8JsonReader>。</span><span class="sxs-lookup"><span data-stu-id="60bbb-108">Unlike the <xref:System.Text.Json.Utf8JsonReader>, which is a ref struct, the state can survive across async/await boundaries and hence this type is required to provide support for reading in more data asynchronously before continuing with a new instance of the <xref:System.Text.Json.Utf8JsonReader>.</span></span>
            
            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="60bbb-109">最大深度设为非正值 (&lt; 0)。</span><span class="sxs-lookup"><span data-stu-id="60bbb-109">The maximum depth is set to a non-positive value (&lt; 0).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesConsumed">
      <MemberSignature Language="C#" Value="public long BytesConsumed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesConsumed" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.BytesConsumed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesConsumed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesConsumed { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesConsumed : int64" Usage="System.Text.Json.JsonReaderState.BytesConsumed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60bbb-110">获取 <see cref="T:System.Text.Json.Utf8JsonReader" /> 目前为止已为给定 UTF-8 编码输入文本使用的字节总数。</span><span class="sxs-lookup"><span data-stu-id="60bbb-110">Gets the total number of bytes consumed by the <see cref="T:System.Text.Json.Utf8JsonReader" /> so far for the given UTF-8 encoded input text.</span></span></summary>
        <value><span data-ttu-id="60bbb-111">占用的字节总数<see cref="T:System.Text.Json.Utf8JsonReader" />到目前为止。</span><span class="sxs-lookup"><span data-stu-id="60bbb-111">The total number of bytes consumed by the <see cref="T:System.Text.Json.Utf8JsonReader" /> so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonReaderOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonReaderOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As JsonReaderOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonReaderOptions Options { System::Text::Json::JsonReaderOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.Json.JsonReaderOptions" Usage="System.Text.Json.JsonReaderState.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonReaderOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60bbb-112">获取使用 <see cref="T:System.Text.Json.Utf8JsonReader" /> 结构读取 JSON 数据时要使用的自定义行为，该结构可能会偏离严格遵守 JSON 规范的要求（这是默认行为）。</span><span class="sxs-lookup"><span data-stu-id="60bbb-112">Gets the custom behavior to use when reading JSON data using the <see cref="T:System.Text.Json.Utf8JsonReader" /> struct that may deviate from strict adherence to the JSON specification, which is the default behavior.</span></span></summary>
        <value><span data-ttu-id="60bbb-113">要读取的 JSON 数据时使用的自定义行为。</span><span class="sxs-lookup"><span data-stu-id="60bbb-113">The custom behavior to use when reading JSON data.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public SequencePosition Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.SequencePosition Position" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As SequencePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property SequencePosition Position { SequencePosition get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : SequencePosition" Usage="System.Text.Json.JsonReaderState.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SequencePosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60bbb-114">在提供的 UTF-8 编码输入 ReadOnlySequence&lt;byte&gt; 中获取当前 <see cref="T:System.SequencePosition" />。</span><span class="sxs-lookup"><span data-stu-id="60bbb-114">Gets the current <see cref="T:System.SequencePosition" /> within the provided UTF-8 encoded input ReadOnlySequence&lt;byte&gt;.</span></span> <span data-ttu-id="60bbb-115">如果 <see cref="T:System.Text.Json.Utf8JsonReader" /> 结构是使用 ReadOnlySpan&lt;byte&gt; 构造的，这将始终返回默认 <see cref="T:System.SequencePosition" />。</span><span class="sxs-lookup"><span data-stu-id="60bbb-115">If the <see cref="T:System.Text.Json.Utf8JsonReader" /> struct was constructed with a ReadOnlySpan&lt;byte&gt; instead, this will always return a default <see cref="T:System.SequencePosition" />.</span></span></summary>
        <value><span data-ttu-id="60bbb-116">当前<see cref="T:System.SequencePosition" />内提供 utf-8 编码输入 ReadOnlySequence&lt;字节&gt;。</span><span class="sxs-lookup"><span data-stu-id="60bbb-116">The current <see cref="T:System.SequencePosition" /> within the provided UTF-8 encoded input ReadOnlySequence&lt;byte&gt;.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>