<Type Name="VisualStateManager" FullName="System.Windows.VisualStateManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2a1d5bd03a0155c55b9fdba355c7f021235b2cff" /><Meta Name="ms.sourcegitcommit" Value="9a6da88bd5455e8274257ca7ad259b42f1de114f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/22/2019" /><Meta Name="ms.locfileid" Value="66008353" /></Metadata><TypeSignature Language="C#" Value="public class VisualStateManager : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualStateManager extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualStateManager" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualStateManager&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualStateManager : System::Windows::DependencyObject" />
  <TypeSignature Language="F#" Value="type VisualStateManager = class&#xA;    inherit DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>管理控件的状态以及用于状态过渡的逻辑。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualStateManager>可用于指定控件的外观，控件的状态时处于某种状态，并当控件更改状态。 例如，<xref:System.Windows.Controls.Button>时它被按下或未按下时可能遇到略有不同的外观。 两个指出<xref:System.Windows.Controls.Button>定义对应于按下时 (`"Pressed"`)，它不是 (`"Normal"`)。 控件处于状态时的外观由定义<xref:System.Windows.VisualState>。 一个<xref:System.Windows.VisualState>包含一系列<xref:System.Windows.Media.Animation.Storyboard>指定控件的外观时该控件处于该状态的更改的对象。 通过设置，向控件添加可视状态`VisualStateManager.VisualStateGroups`附加属性在控件上的。 每个<xref:System.Windows.VisualStateGroup>包含一系列<xref:System.Windows.VisualState>互相排斥的对象。 也就是说，控件将始终在一个在每个状态中<xref:System.Windows.VisualStateGroup>。  
  
 <xref:System.Windows.VisualStateManager>还可用于指定在控制进入特定状态。 若要更改状态而应调用的方法取决于你的方案。 如果创建使用的控件<xref:System.Windows.VisualStateManager>在其<xref:System.Windows.Controls.ControlTemplate>，调用<xref:System.Windows.VisualStateManager.GoToState%2A>方法。 详细了解如何创建控件，使用<xref:System.Windows.VisualStateManager>，请参阅[创建控件具有可自定义外观](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md)。 如果您使用<xref:System.Windows.VisualStateManager>之外<xref:System.Windows.Controls.ControlTemplate>(例如，如果您使用<xref:System.Windows.VisualStateManager>中<xref:System.Windows.Controls.UserControl>或一个元素)，调用<xref:System.Windows.VisualStateManager.GoToElementState%2A>方法。 在任一情况下，<xref:System.Windows.VisualStateManager>执行所需相应地启动和停止与所涉及的状态相关联的情节提要的逻辑。 例如，假设一个控件定义的状态，`State1`和`State2`，其中每个情节提要与它相关联。 如果控件处于`State1`并传递`State2`到<xref:System.Windows.VisualStateManager.GoToState%2A>或<xref:System.Windows.VisualStateManager.GoToElementState%2A>，则<xref:System.Windows.VisualStateManager>启动情节提要`State2`并停止在情节提要`State1`。  
  
 附带的控件[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]使用<xref:System.Windows.VisualStateManager>更改可视状态。 当您创建<xref:System.Windows.Controls.ControlTemplate>附带的控件[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，可以添加<xref:System.Windows.VisualState>到控件的对象<xref:System.Windows.Controls.ControlTemplate>处于某个特定状态指定控件的外观。 若要查找附带的控件的可视状态名称[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]，请参阅[Control 样式和模板](~/docs/framework/wpf/controls/control-styles-and-templates.md)。 定义控件的逻辑处理状态，因此不需要而不执行任何操作之间的过渡<xref:System.Windows.VisualState>中的新对象<xref:System.Windows.Controls.ControlTemplate>。 有关如何创建现有控件的控件模板的详细信息，请参阅[通过创建 ControlTemplate 自定义现有控件的外观](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。  
  
 如果你想要实现您自己的逻辑用于状态过渡，则必须从<xref:System.Windows.VisualStateManager>，重写<xref:System.Windows.VisualStateManager.GoToStateCore%2A>方法，并设置<xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A?displayProperty=nameWithType>附加属性上使用自定义逻辑的控件。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Windows.Shapes.Rectangle>，并添加<xref:System.Windows.VisualStateGroup>名为`CommonStates`到`VisualStateManager.VisualStatesGroups`附加属性。 该示例定义了`MouseOver`并`Normal`<xref:System.Windows.VisualState>中的对象`CommonStates` <xref:System.Windows.VisualStateGroup>。 当用户将鼠标指针移<xref:System.Windows.Shapes.Rectangle>，它将从红色变为绿色 over 半秒。 当用户移动鼠标离开矩形，<xref:System.Windows.Controls.Grid>立即更改回红色。 请注意，`Normal`未定义状态<xref:System.Windows.Media.Animation.Storyboard>。 一个<xref:System.Windows.Media.Animation.Storyboard>因为不需要时<xref:System.Windows.Shapes.Rectangle>从过渡`MouseOver`状态变为`Normal`状态，<xref:System.Windows.Media.Animation.Storyboard>有关`MouseOver`停止和<xref:System.Windows.Media.SolidColorBrush.Color%2A>属性<xref:System.Windows.Media.SolidColorBrush>返回为红色。  
  
 [!code-xaml[VSMCustomControl#VSMNoTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml#vsmnotemplate)]  
  
 下面的示例演示在前面的示例和调用中定义的事件处理程序<xref:System.Windows.VisualStateManager.GoToElementState%2A>状态间转换的方法。 上一示例中的矩形是否属于的一部分<xref:System.Windows.Controls.ControlTemplate>，该示例需要调用<xref:System.Windows.VisualStateManager.GoToState%2A>方法。  
  
 [!code-csharp[VSMCustomControl#GoToElementState](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml.cs#gotoelementstate)]
 [!code-vb[VSMCustomControl#GoToElementState](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmcustomcontrol/visualbasic/window1.xaml.vb#gotoelementstate)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualStateManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualStateManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.VisualStateManager" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomVisualStateManager">
      <MemberSignature Language="C#" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="ILAsm" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateManager.CustomVisualStateManager" />
      <MemberSignature Language="VB.NET" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="F#" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" Usage="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取或设置在控件的状态间转换的 <see cref="T:System.Windows.VisualStateManager" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A>是`null`，则<xref:System.Windows.VisualStateManager>状态之间会使用转换逻辑。 如果你想要实现您自己的逻辑用于状态过渡，创建一个类继承自<xref:System.Windows.VisualStateManager>并重写<xref:System.Windows.VisualStateManager.GoToStateCore%2A>方法。 若要使用自定义类，设置<xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A>属性设置为自定义类型的对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomVisualStateManagerProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomVisualStateManagerProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomVisualStateManagerProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.VisualStateManager.CustomVisualStateManagerProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomVisualStateManagerProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomVisualStateManagerProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomVisualStateManagerProperty : System.Windows.DependencyProperty" Usage="System.Windows.VisualStateManager.CustomVisualStateManagerProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomVisualStateManager">
      <MemberSignature Language="C#" Value="public static System.Windows.VisualStateManager GetCustomVisualStateManager (System.Windows.FrameworkElement obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.VisualStateManager GetCustomVisualStateManager(class System.Windows.FrameworkElement obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GetCustomVisualStateManager(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCustomVisualStateManager (obj As FrameworkElement) As VisualStateManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::VisualStateManager ^ GetCustomVisualStateManager(System::Windows::FrameworkElement ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetCustomVisualStateManager : System.Windows.FrameworkElement -&gt; System.Windows.VisualStateManager" Usage="System.Windows.VisualStateManager.GetCustomVisualStateManager obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VisualStateManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="obj">要从中获取 <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> 附加属性的元素。</param>
        <summary>获取 <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> 附加属性。</summary>
        <returns>切换控件状态的可视状态管理器。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVisualStateGroups">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetVisualStateGroups (System.Windows.FrameworkElement obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetVisualStateGroups(class System.Windows.FrameworkElement obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GetVisualStateGroups(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetVisualStateGroups (obj As FrameworkElement) As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetVisualStateGroups(System::Windows::FrameworkElement ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetVisualStateGroups : System.Windows.FrameworkElement -&gt; System.Collections.IList" Usage="System.Windows.VisualStateManager.GetVisualStateGroups obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="obj">要从中获取 <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> 附加属性的元素。</param>
        <summary>获取 <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> 附加属性。</summary>
        <returns>与指定对象关联的 <see cref="T:System.Windows.VisualStateGroup" /> 对象的集合。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoToElementState">
      <MemberSignature Language="C#" Value="public static bool GoToElementState (System.Windows.FrameworkElement stateGroupsRoot, string stateName, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GoToElementState(class System.Windows.FrameworkElement stateGroupsRoot, string stateName, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToElementState(System.Windows.FrameworkElement,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToElementState (stateGroupsRoot As FrameworkElement, stateName As String, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GoToElementState(System::Windows::FrameworkElement ^ stateGroupsRoot, System::String ^ stateName, bool useTransitions);" />
      <MemberSignature Language="F#" Value="static member GoToElementState : System.Windows.FrameworkElement * string * bool -&gt; bool" Usage="System.Windows.VisualStateManager.GoToElementState (stateGroupsRoot, stateName, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stateGroupsRoot">包含 <see cref="T:System.Windows.VisualStateManager" /> 的根元素。</param>
        <param name="stateName">要切换到的状态。</param>
        <param name="useTransitions">要使用 <see cref="T:System.Windows.VisualTransition" /> 对象进行状态切换，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>使元素在两个状态间转换。 使用此方法转换由应用程序（而非控件）定义的状态。</summary>
        <returns>如果控件已成功过渡到新状态，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用<xref:System.Windows.VisualStateManager.GoToElementState%2A>之外的元素的方法，以更改状态<xref:System.Windows.Controls.ControlTemplate>(例如，如果您使用<xref:System.Windows.VisualStateManager>中<xref:System.Windows.DataTemplate>或<xref:System.Windows.Window>)。 调用<xref:System.Windows.VisualStateManager.GoToState%2A>方法，如果要更改使用的控件中的状态<xref:System.Windows.VisualStateManager>在其<xref:System.Windows.Controls.ControlTemplate>。  
  
   
  
## Examples  
 以下示例创建的应用程序会提示用户猜测一个数字，介于 1 和 100 之间。  当用户输入一个数字时，该应用程序指示猜测是否过高、 过低，或正确。  以下[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]创建应用程序的用户界面，并定义了 4 种状态： `TooLow`， `TooHigh`， `Correct`，和`Guessing`。 应用程序开始时，它是在`Guessing`状态。 .  
  
 [!code-xaml[VSMGoToElementState#GoToElementStateXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmgotoelementstate/csharp/mainwindow.xaml#gotoelementstatexaml)]  
  
 下面的代码显示了应用程序的逻辑。  当用户输入一个数字，并单击按钮时，应用程序调用<xref:System.Windows.VisualStateManager.GoToElementState%2A>转换到`TooHigh`， `TooLow`，或`Correct`向用户猜测提供反馈。  若要尝试此示例中，调用`GenerateNumber`方法时应用程序开始。  
  
 [!code-csharp[VSMGoToElementState#GoToElementStateCode](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmgotoelementstate/csharp/mainwindow.xaml.cs#gotoelementstatecode)]
 [!code-vb[VSMGoToElementState#GoToElementStateCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmgotoelementstate/visualbasic/mainwindow.xaml.vb#gotoelementstatecode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stateGroupsRoot" /> 为 <see langword="null" />。  
  
或 
 <paramref name="stateName" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GoToState">
      <MemberSignature Language="C#" Value="public static bool GoToState (System.Windows.FrameworkElement control, string stateName, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GoToState(class System.Windows.FrameworkElement control, string stateName, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToState(System.Windows.FrameworkElement,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToState (control As FrameworkElement, stateName As String, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GoToState(System::Windows::FrameworkElement ^ control, System::String ^ stateName, bool useTransitions);" />
      <MemberSignature Language="F#" Value="static member GoToState : System.Windows.FrameworkElement * string * bool -&gt; bool" Usage="System.Windows.VisualStateManager.GoToState (control, stateName, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">要进行状态过渡的控件。</param>
        <param name="stateName">要切换到的状态。</param>
        <param name="useTransitions">要使用 <see cref="T:System.Windows.VisualTransition" /> 对象进行状态切换，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>在控件的两种状态之间切换。 使用此方法转换具有 <see cref="T:System.Windows.Controls.ControlTemplate" /> 的控件的状态。</summary>
        <returns>如果控件已成功过渡到新状态，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用<xref:System.Windows.VisualStateManager.GoToState%2A>方法，如果要更改使用的控件中的状态<xref:System.Windows.VisualStateManager>在其<xref:System.Windows.Controls.ControlTemplate>。 调用<xref:System.Windows.VisualStateManager.GoToElementState%2A>之外的元素的方法，以更改状态<xref:System.Windows.Controls.ControlTemplate>(例如，如果您使用<xref:System.Windows.VisualStateManager>中<xref:System.Windows.Controls.UserControl>或一个元素)。  
  
   
  
## Examples  
 下面的示例演示使用的控件<xref:System.Windows.VisualStateManager.GoToState%2A>状态间转换的方法。 有关完整示例，请参阅[创建控件，具有可自定义外观](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md)。  
  
 [!code-csharp[VSMCustomControl#UpdateStates](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/numericupdown.cs#updatestates)]
 [!code-vb[VSMCustomControl#UpdateStates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmcustomcontrol/visualbasic/numericupdown.vb#updatestates)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> 为 <see langword="null" />。  
  
或 
 <paramref name="stateName" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GoToStateCore">
      <MemberSignature Language="C#" Value="protected virtual bool GoToStateCore (System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot, string stateName, System.Windows.VisualStateGroup group, System.Windows.VisualState state, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GoToStateCore(class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot, string stateName, class System.Windows.VisualStateGroup group, class System.Windows.VisualState state, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToStateCore(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.String,System.Windows.VisualStateGroup,System.Windows.VisualState,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GoToStateCore (control As FrameworkElement, stateGroupsRoot As FrameworkElement, stateName As String, group As VisualStateGroup, state As VisualState, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GoToStateCore(System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot, System::String ^ stateName, System::Windows::VisualStateGroup ^ group, System::Windows::VisualState ^ state, bool useTransitions);" />
      <MemberSignature Language="F#" Value="abstract member GoToStateCore : System.Windows.FrameworkElement * System.Windows.FrameworkElement * string * System.Windows.VisualStateGroup * System.Windows.VisualState * bool -&gt; bool&#xA;override this.GoToStateCore : System.Windows.FrameworkElement * System.Windows.FrameworkElement * string * System.Windows.VisualStateGroup * System.Windows.VisualState * bool -&gt; bool" Usage="visualStateManager.GoToStateCore (control, stateGroupsRoot, stateName, group, state, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="group" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="state" Type="System.Windows.VisualState" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">要进行状态过渡的控件。</param>
        <param name="stateGroupsRoot">包含 <see cref="T:System.Windows.VisualStateManager" /> 的根元素。</param>
        <param name="stateName">要过渡到的状态的名称。</param>
        <param name="group">状态所属的 <see cref="T:System.Windows.VisualStateGroup" />。</param>
        <param name="state">要过渡到的状态的表示形式。</param>
        <param name="useTransitions">要使用 <see cref="T:System.Windows.VisualTransition" /> 对象进行状态切换，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>使控件在状态间过渡。</summary>
        <returns>如果控件已成功过渡到新状态，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualStateManager.GoToStateCore%2A>方法执行所需相应地启动和停止与转换相关联的情节提要的逻辑。 当控件调用<xref:System.Windows.VisualStateManager.GoToState%2A>以更改其状态，<xref:System.Windows.VisualStateManager>执行以下操作：  
  
-   首先，如果<xref:System.Windows.VisualState>控件正在转换到具有<xref:System.Windows.Media.Animation.Storyboard>，情节提要开始。 然后，如果<xref:System.Windows.VisualState>来自该控件具有<xref:System.Windows.Media.Animation.Storyboard>，情节提要结束。  
  
-   如果控件已存在于`stateName`状态，<xref:System.Windows.VisualStateManager.GoToState%2A>不执行任何操作，并返回`true`。  
  
-   如果`stateName`中不存在<xref:System.Windows.Controls.ControlTemplate>的`control`，<xref:System.Windows.VisualStateManager.GoToState%2A>不执行任何操作，并返回`false`。  
  
 您可以实现您自己<xref:System.Windows.VisualStateManager>用于状态过渡提供不同的逻辑。 例如，可以更改前面所述的逻辑，也可以提供自定义动画类型之间转换的逻辑。  若要实现<xref:System.Windows.VisualStateManager>，创建一个类继承自<xref:System.Windows.VisualStateManager>并重写<xref:System.Windows.VisualStateManager.GoToStateCore%2A>方法。 若要使用自定义类，设置<xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A>属性设置为自定义类型的对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseCurrentStateChanged">
      <MemberSignature Language="C#" Value="protected void RaiseCurrentStateChanged (System.Windows.VisualStateGroup stateGroup, System.Windows.VisualState oldState, System.Windows.VisualState newState, System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseCurrentStateChanged(class System.Windows.VisualStateGroup stateGroup, class System.Windows.VisualState oldState, class System.Windows.VisualState newState, class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseCurrentStateChanged (stateGroup As VisualStateGroup, oldState As VisualState, newState As VisualState, control As FrameworkElement, stateGroupsRoot As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseCurrentStateChanged(System::Windows::VisualStateGroup ^ stateGroup, System::Windows::VisualState ^ oldState, System::Windows::VisualState ^ newState, System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot);" />
      <MemberSignature Language="F#" Value="member this.RaiseCurrentStateChanged : System.Windows.VisualStateGroup * System.Windows.VisualState * System.Windows.VisualState * System.Windows.FrameworkElement * System.Windows.FrameworkElement -&gt; unit" Usage="visualStateManager.RaiseCurrentStateChanged (stateGroup, oldState, newState, control, stateGroupsRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroup" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="oldState" Type="System.Windows.VisualState" />
        <Parameter Name="newState" Type="System.Windows.VisualState" />
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="stateGroup">发生 <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> 事件的对象。</param>
        <param name="oldState">控件要从其过渡的状态。</param>
        <param name="newState">控件要过渡到的状态。</param>
        <param name="control">正在进行状态过渡的控件。</param>
        <param name="stateGroupsRoot">包含 <see cref="T:System.Windows.VisualStateManager" /> 的根元素。</param>
        <summary>在指定的 <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> 对象上引发 <see cref="T:System.Windows.VisualStateGroup" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.VisualStateGroup>上设置<xref:System.Windows.Controls.ControlTemplate>的一个控件`control`参数设置为拥有的控件的<xref:System.Windows.Controls.ControlTemplate>。  当<xref:System.Windows.VisualStateGroup>上设置<xref:System.Windows.FrameworkElement>，`control`是`null`应使用`stateGroupsRoot`参数。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stateGroupsRoot" /> 为 <see langword="null" />。  
  
或 
 <paramref name="newState" /> 为 <see langword="null" />。</exception>
        <block subset="none" type="overrides"><para>重写时<see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />在派生类中，请务必调用基类的<see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />方法，以便已注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="RaiseCurrentStateChanging">
      <MemberSignature Language="C#" Value="protected void RaiseCurrentStateChanging (System.Windows.VisualStateGroup stateGroup, System.Windows.VisualState oldState, System.Windows.VisualState newState, System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseCurrentStateChanging(class System.Windows.VisualStateGroup stateGroup, class System.Windows.VisualState oldState, class System.Windows.VisualState newState, class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseCurrentStateChanging (stateGroup As VisualStateGroup, oldState As VisualState, newState As VisualState, control As FrameworkElement, stateGroupsRoot As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseCurrentStateChanging(System::Windows::VisualStateGroup ^ stateGroup, System::Windows::VisualState ^ oldState, System::Windows::VisualState ^ newState, System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot);" />
      <MemberSignature Language="F#" Value="member this.RaiseCurrentStateChanging : System.Windows.VisualStateGroup * System.Windows.VisualState * System.Windows.VisualState * System.Windows.FrameworkElement * System.Windows.FrameworkElement -&gt; unit" Usage="visualStateManager.RaiseCurrentStateChanging (stateGroup, oldState, newState, control, stateGroupsRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroup" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="oldState" Type="System.Windows.VisualState" />
        <Parameter Name="newState" Type="System.Windows.VisualState" />
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="stateGroup">发生 <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> 事件的对象。</param>
        <param name="oldState">控件要从其过渡的状态。</param>
        <param name="newState">控件要过渡到的状态。</param>
        <param name="control">正在进行状态过渡的控件。</param>
        <param name="stateGroupsRoot">包含 <see cref="T:System.Windows.VisualStateManager" /> 的根元素。</param>
        <summary>在指定的 <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> 对象上引发 <see cref="T:System.Windows.VisualStateGroup" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Windows.VisualStateGroup>上设置<xref:System.Windows.Controls.ControlTemplate>的一个控件`control`参数设置为拥有的控件的<xref:System.Windows.Controls.ControlTemplate>。  当<xref:System.Windows.VisualStateGroup>上设置<xref:System.Windows.FrameworkElement>，`control`是`null`应使用`stateGroupsRoot`参数。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stateGroupsRoot" /> 为 <see langword="null" />。  
  
或 
 <paramref name="newState" /> 为 <see langword="null" />。</exception>
        <block subset="none" type="overrides"><para>重写时<see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />在派生类中，请务必调用基类的<see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />方法，以便已注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="SetCustomVisualStateManager">
      <MemberSignature Language="C#" Value="public static void SetCustomVisualStateManager (System.Windows.FrameworkElement obj, System.Windows.VisualStateManager value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCustomVisualStateManager(class System.Windows.FrameworkElement obj, class System.Windows.VisualStateManager value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.SetCustomVisualStateManager(System.Windows.FrameworkElement,System.Windows.VisualStateManager)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCustomVisualStateManager (obj As FrameworkElement, value As VisualStateManager)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCustomVisualStateManager(System::Windows::FrameworkElement ^ obj, System::Windows::VisualStateManager ^ value);" />
      <MemberSignature Language="F#" Value="static member SetCustomVisualStateManager : System.Windows.FrameworkElement * System.Windows.VisualStateManager -&gt; unit" Usage="System.Windows.VisualStateManager.SetCustomVisualStateManager (obj, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
        <Parameter Name="value" Type="System.Windows.VisualStateManager" />
      </Parameters>
      <Docs>
        <param name="obj">要对其设置属性的对象。</param>
        <param name="value">切换控件状态的可视状态管理器。</param>
        <summary>设置 <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> 附加属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualStateGroups">
      <MemberSignature Language="C#" Value="see GetVisualStateGroups" />
      <MemberSignature Language="ILAsm" Value="see GetVisualStateGroups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateManager.VisualStateGroups" />
      <MemberSignature Language="VB.NET" Value="see GetVisualStateGroups" />
      <MemberSignature Language="F#" Value="see GetVisualStateGroups" Usage="see GetVisualStateGroups" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.VisualStateGroup" /> 对象的集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
 
## Remarks  
 每个<xref:System.Windows.VisualStateGroup>包含一系列<xref:System.Windows.VisualState>对象。 一个<xref:System.Windows.VisualState>包含一系列<xref:System.Windows.Media.Animation.Storyboard>指定控件的外观时该控件处于某种状态的更改的对象。 例如，<xref:System.Windows.Controls.Button>时它被按下或未按下时可能遇到略有不同的外观。 两个指出<xref:System.Windows.Controls.Button>定义对应于按下时 (`"Pressed"`)，它不是 (`"Normal"`)。  
  
 您将添加<xref:System.Windows.VisualState>通过设置控制<xref:System.Windows.VisualStateManager.VisualStateGroups%2A>附加属性在控件上的。 您将放在彼此互相排斥中相同的状态<xref:System.Windows.VisualStateGroup>。 例如，<xref:System.Windows.Controls.CheckBox>具有两个<xref:System.Windows.VisualStateGroup>对象。 一个包含状态， `Normal`， `MouseOver`， `Pressed`，和`Disabled`。 另一个包含状态`Checked`， `UnChecked`，和`Indeterminate`。 <xref:System.Windows.Controls.CheckBox>可以有状态`MouseOver`并`UnChecked`时相同，但它不能为`MouseOver`和`Pressed`在同一时间的状态。  
  
 尽管您可以添加<xref:System.Windows.VisualState>对象中的任何元素，它们是特别有用的方法来让其他人能够重新定义的可视行为<xref:System.Windows.Controls.Control>。 如果创建使用的自定义控件<xref:System.Windows.Controls.ControlTemplate>，可以指定哪些状态控件可以是在通过添加<xref:System.Windows.TemplateVisualStateAttribute>上其类定义。 然后创建一个新的人<xref:System.Windows.Controls.ControlTemplate>为您的控件可以添加<xref:System.Windows.VisualState>到模板的对象。 具有相同的状态<xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=fullName>属于同一个<xref:System.Windows.VisualStateGroup>。  
  
 有关如何使用详细信息<xref:System.Windows.VisualStateGroup>中的对象<xref:System.Windows.Controls.ControlTemplate>，请参阅[通过创建 ControlTemplate 自定义现有控件的外观](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。 详细了解如何创建控件，使用<xref:System.Windows.VisualStateManager>，请参阅[创建控件具有可自定义外观](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md)。  
     
## Examples  
 下面的示例创建一个简单<xref:System.Windows.Controls.ControlTemplate>有关<xref:System.Windows.Controls.Button>，其中包含一个<xref:System.Windows.Controls.Grid>。 它还包含<xref:System.Windows.VisualStateGroup>名为`CommonStates`，用于定义`MouseOver`和`Normal`状态。 <xref:System.Windows.VisualStateGroup>还有<xref:System.Windows.VisualTransition>，它指定，它将在半秒<xref:System.Windows.Controls.Grid>当用户将鼠标指针移到从绿色更改为红色<xref:System.Windows.Controls.Button>。  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualStateGroupsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisualStateGroupsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisualStateGroupsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.VisualStateManager.VisualStateGroupsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisualStateGroupsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisualStateGroupsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VisualStateGroupsProperty : System.Windows.DependencyProperty" Usage="System.Windows.VisualStateManager.VisualStateGroupsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>