<Type Name="IDictionary&lt;TKey,TValue&gt;" FullName="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="40ab9b64b0d119d7be7f4670a4a8cef4bd05ca30" /><Meta Name="ms.sourcegitcommit" Value="9a6da88bd5455e8274257ca7ad259b42f1de114f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/22/2019" /><Meta Name="ms.locfileid" Value="66006582" /></Metadata><TypeSignature Language="C#" Value="public interface IDictionary&lt;TKey,TValue&gt; : System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDictionary`2&lt;TKey, TValue&gt; implements class System.Collections.Generic.ICollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IDictionary`2" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDictionary(Of TKey, TValue)&#xA;Implements ICollection(Of KeyValuePair(Of TKey, TValue)), IEnumerable(Of KeyValuePair(Of TKey, TValue))" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TValue&gt;&#xA;public interface class IDictionary : System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;" />
  <TypeSignature Language="F#" Value="type IDictionary&lt;'Key, 'Value&gt; = interface&#xA;    interface ICollection&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface seq&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey"><span data-ttu-id="84d7f-101">字典中键的类型。</span><span class="sxs-lookup"><span data-stu-id="84d7f-101">The type of keys in the dictionary.</span></span></typeparam>
    <typeparam name="TValue"><span data-ttu-id="84d7f-102">字典中值的类型。</span><span class="sxs-lookup"><span data-stu-id="84d7f-102">The type of values in the dictionary.</span></span></typeparam>
    <summary><span data-ttu-id="84d7f-103">表示键/值对的泛型集合。</span><span class="sxs-lookup"><span data-stu-id="84d7f-103">Represents a generic collection of key/value pairs.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84d7f-104"><xref:System.Collections.Generic.IDictionary%602>接口是键/值对的泛型集合的基接口。</span><span class="sxs-lookup"><span data-stu-id="84d7f-104">The <xref:System.Collections.Generic.IDictionary%602> interface is the base interface for generic collections of key/value pairs.</span></span>  
  
 <span data-ttu-id="84d7f-105">每个元素都是键/值对存储在<xref:System.Collections.Generic.KeyValuePair%602>对象。</span><span class="sxs-lookup"><span data-stu-id="84d7f-105">Each element is a key/value pair stored in a <xref:System.Collections.Generic.KeyValuePair%602> object.</span></span>  
  
 <span data-ttu-id="84d7f-106">每个对都必须有唯一键。</span><span class="sxs-lookup"><span data-stu-id="84d7f-106">Each pair must have a unique key.</span></span> <span data-ttu-id="84d7f-107">实现可以改变是否允许`key`为`null`。</span><span class="sxs-lookup"><span data-stu-id="84d7f-107">Implementations can vary in whether they allow `key` to be `null`.</span></span> <span data-ttu-id="84d7f-108">值可以是`null`和不需要是唯一的。</span><span class="sxs-lookup"><span data-stu-id="84d7f-108">The value can be `null` and does not have to be unique.</span></span> <span data-ttu-id="84d7f-109"><xref:System.Collections.Generic.IDictionary%602>接口允许对所包含的键和值进行枚举，但它并不表示任何特定的排序顺序。</span><span class="sxs-lookup"><span data-stu-id="84d7f-109">The <xref:System.Collections.Generic.IDictionary%602> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.</span></span>  
  
 <span data-ttu-id="84d7f-110">`foreach`语句的C#语言 (`For Each`在 Visual Basic 中`for each`在C++) 返回集合中的元素的类型的对象。</span><span class="sxs-lookup"><span data-stu-id="84d7f-110">The `foreach` statement of the C# language (`For Each` in Visual Basic, `for each` in C++) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="84d7f-111">由于每个元素的<xref:System.Collections.Generic.IDictionary%602>是一个键/值对，元素类型不是键的类型或值的类型。</span><span class="sxs-lookup"><span data-stu-id="84d7f-111">Since each element of the <xref:System.Collections.Generic.IDictionary%602> is a key/value pair, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="84d7f-112">相反，元素类型是<xref:System.Collections.Generic.KeyValuePair%602>。</span><span class="sxs-lookup"><span data-stu-id="84d7f-112">Instead, the element type is <xref:System.Collections.Generic.KeyValuePair%602>.</span></span> <span data-ttu-id="84d7f-113">例如:</span><span class="sxs-lookup"><span data-stu-id="84d7f-113">For example:</span></span>  
  
 [!code-cpp[Generic.IDictionary#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source2.cpp#11)]
 [!code-csharp[Generic.IDictionary#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source2.cs#11)]
 [!code-vb[Generic.IDictionary#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source2.vb#11)]  
  
 <span data-ttu-id="84d7f-114">`foreach`语句是只允许读取、 不写入集合的枚举器周围的包装。</span><span class="sxs-lookup"><span data-stu-id="84d7f-114">The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="84d7f-115">因为密钥可以被继承，但不能更改其行为，使用的比较保证其绝对唯一性<xref:System.Type.Equals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="84d7f-115">Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <xref:System.Type.Equals%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84d7f-116">下面的代码示例创建一个空<xref:System.Collections.Generic.Dictionary%602>的字符串，使用字符串键，并通过它访问<xref:System.Collections.Generic.IDictionary%602>接口。</span><span class="sxs-lookup"><span data-stu-id="84d7f-116">The following code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings, with string keys, and accesses it through the <xref:System.Collections.Generic.IDictionary%602> interface.</span></span>  
  
 <span data-ttu-id="84d7f-117">代码示例使用<xref:System.Collections.Generic.IDictionary%602.Add%2A>方法来添加一些元素。</span><span class="sxs-lookup"><span data-stu-id="84d7f-117">The code example uses the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="84d7f-118">该示例演示<xref:System.Collections.Generic.IDictionary%602.Add%2A>方法会抛出<xref:System.ArgumentException>时尝试添加重复的键。</span><span class="sxs-lookup"><span data-stu-id="84d7f-118">The example demonstrates that the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method throws <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="84d7f-119">该示例使用<xref:System.Collections.Generic.IDictionary%602.Item%2A>属性 （C# 中的索引器） 来检索值，从而演示<xref:System.Collections.Generic.KeyNotFoundException>请求的键不存在，以及可以替换与某个键相关联的值时引发。</span><span class="sxs-lookup"><span data-stu-id="84d7f-119">The example uses the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</span></span>  
  
 <span data-ttu-id="84d7f-120">该示例演示如何使用<xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A>方法作为更高效的方法来检索值，如果程序必须经常尝试在字典中，以及如何使用不<xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A>方法来测试是否在调用之前存在的键<xref:System.Collections.Generic.IDictionary%602.Add%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="84d7f-120">The example shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary, and how to use the <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> method to test whether a key exists prior to calling the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method.</span></span>  
  
 <span data-ttu-id="84d7f-121">最后，该示例演示如何枚举的键和值在字典中，以及如何单独使用枚举值<xref:System.Collections.Generic.IDictionary%602.Values%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="84d7f-121">Finally, the example shows how to enumerate the keys and values in the dictionary, and how to enumerate the values alone using the <xref:System.Collections.Generic.IDictionary%602.Values%2A> property.</span></span>  
  
 [!code-cpp[Generic.IDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#1)]
 [!code-csharp[Generic.IDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#1)]
 [!code-vb[Generic.IDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="84d7f-122">实现类必须具有对键进行比较的方法。</span><span class="sxs-lookup"><span data-stu-id="84d7f-122">The implementing class must have a means to compare keys.</span></span></para></block>
    <altmember cref="T:System.Collections.Generic.ICollection`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As TKey, value As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'Key * 'Value -&gt; unit" Usage="iDictionary.Add (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="84d7f-123">用作要添加的元素的键的对象。</span><span class="sxs-lookup"><span data-stu-id="84d7f-123">The object to use as the key of the element to add.</span></span></param>
        <param name="value"><span data-ttu-id="84d7f-124">用作要添加的元素的值的对象。</span><span class="sxs-lookup"><span data-stu-id="84d7f-124">The object to use as the value of the element to add.</span></span></param>
        <summary><span data-ttu-id="84d7f-125">在 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中添加一个带有所提供的键和值的元素。</span><span class="sxs-lookup"><span data-stu-id="84d7f-125">Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84d7f-126">此外可以使用<xref:System.Collections.Generic.IDictionary%602.Item%2A>属性来添加新元素不存在的键的值设置在字典中; 例如， `myCollection["myNonexistentKey"] = myValue` C# 中 (`myCollection("myNonexistentKey") = myValue`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="84d7f-126">You can also use the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue` in C# (`myCollection("myNonexistentKey") = myValue` in Visual Basic).</span></span> <span data-ttu-id="84d7f-127">但是，如果在字典中已存在指定的键，则将设置<xref:System.Collections.Generic.IDictionary%602.Item%2A>属性将会覆盖旧值。</span><span class="sxs-lookup"><span data-stu-id="84d7f-127">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="84d7f-128">与此相反，<xref:System.Collections.Generic.IDictionary%602.Add%2A>方法不会修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="84d7f-128">In contrast, the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="84d7f-129">实现可能存在差异，如何确定相等性的对象;例如，<xref:System.Collections.Generic.List%601>类使用<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>，而<xref:System.Collections.Generic.Dictionary%602>类允许用户指定<xref:System.Collections.Generic.IComparer%601>实现用于比较键。</span><span class="sxs-lookup"><span data-stu-id="84d7f-129">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
 <span data-ttu-id="84d7f-130">实现可以改变是否允许`key`为`null`。</span><span class="sxs-lookup"><span data-stu-id="84d7f-130">Implementations can vary in whether they allow `key` to be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84d7f-131">下面的代码示例创建一个空<xref:System.Collections.Generic.Dictionary%602>的字符串，使用整数键，并访问通过<xref:System.Collections.Generic.IDictionary%602>接口。</span><span class="sxs-lookup"><span data-stu-id="84d7f-131">The following code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings, with integer keys, and accesses it through the <xref:System.Collections.Generic.IDictionary%602> interface.</span></span> <span data-ttu-id="84d7f-132">代码示例使用<xref:System.Collections.Generic.IDictionary%602.Add%2A>方法来添加一些元素。</span><span class="sxs-lookup"><span data-stu-id="84d7f-132">The code example uses the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="84d7f-133">该示例演示<xref:System.Collections.Generic.IDictionary%602.Add%2A>方法会抛出<xref:System.ArgumentException>时尝试添加重复的键。</span><span class="sxs-lookup"><span data-stu-id="84d7f-133">The example demonstrates that the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="84d7f-134">此代码是一个更大的示例可以编译和执行的一部分。</span><span class="sxs-lookup"><span data-stu-id="84d7f-134">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="84d7f-135">请参阅 <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="84d7f-135">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#2](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#2)]
 [!code-csharp[Generic.IDictionary#2](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#2)]
 [!code-vb[Generic.IDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="84d7f-136"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="84d7f-136"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="84d7f-137"><see cref="T:System.Collections.Generic.IDictionary`2" /> 中已存在具有相同键的元素。</span><span class="sxs-lookup"><span data-stu-id="84d7f-137">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="84d7f-138"><see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读。</span><span class="sxs-lookup"><span data-stu-id="84d7f-138">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsKey (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ContainsKey(TKey key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : 'Key -&gt; bool" Usage="iDictionary.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="84d7f-139">要在 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中定位的键。</span><span class="sxs-lookup"><span data-stu-id="84d7f-139">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></param>
        <summary><span data-ttu-id="84d7f-140">确定是否 <see cref="T:System.Collections.Generic.IDictionary`2" /> 包含带有指定键的元素。</span><span class="sxs-lookup"><span data-stu-id="84d7f-140">Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.</span></span></summary>
        <returns><span data-ttu-id="84d7f-141">如果 <see langword="true" /> 包含具有键的元素，则为 <see cref="T:System.Collections.Generic.IDictionary`2" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84d7f-141"><see langword="true" /> if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84d7f-142">实现可能存在差异，如何确定相等性的对象;例如，<xref:System.Collections.Generic.List%601>类使用<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>，而<xref:System.Collections.Generic.Dictionary%602>类允许用户指定<xref:System.Collections.Generic.IComparer%601>实现用于比较键。</span><span class="sxs-lookup"><span data-stu-id="84d7f-142">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
 <span data-ttu-id="84d7f-143">实现可以改变是否允许`key`为`null`。</span><span class="sxs-lookup"><span data-stu-id="84d7f-143">Implementations can vary in whether they allow `key` to be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84d7f-144">下面的代码示例演示如何使用<xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A>方法来测试某个键是否存在之前调用<xref:System.Collections.Generic.IDictionary%602.Add%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="84d7f-144">The following code example shows how to use the <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> method to test whether a key exists prior to calling the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method.</span></span> <span data-ttu-id="84d7f-145">它还演示如何使用<xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A>方法，可以更有效地检索值，如果程序频繁尝试不在字典中的密钥值。</span><span class="sxs-lookup"><span data-stu-id="84d7f-145">It also shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method, which can be a more efficient way to retrieve values if a program frequently tries key values that are not in the dictionary.</span></span> <span data-ttu-id="84d7f-146">最后，它演示了如何将使用的项插入<xref:System.Collections.Generic.IDictionary%602.Item%2A>属性 （C# 中的索引器）。</span><span class="sxs-lookup"><span data-stu-id="84d7f-146">Finally, it shows how to insert items using <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#).</span></span>  
  
 <span data-ttu-id="84d7f-147">此代码是一个更大的示例可以编译和执行的一部分。</span><span class="sxs-lookup"><span data-stu-id="84d7f-147">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="84d7f-148">请参阅 <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="84d7f-148">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#6](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#6)]
 [!code-csharp[Generic.IDictionary#6](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#6)]
 [!code-vb[Generic.IDictionary#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#6)]  
[!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
[!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
[!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="84d7f-149"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="84d7f-149"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TValue this[TKey key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As TKey) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue default[TKey] { TValue get(TKey key); void set(TKey key, TValue value); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : 'Value with get, set" Usage="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="84d7f-150">要获取或设置的元素的键。</span><span class="sxs-lookup"><span data-stu-id="84d7f-150">The key of the element to get or set.</span></span></param>
        <summary><span data-ttu-id="84d7f-151">获取或设置具有指定键的元素。</span><span class="sxs-lookup"><span data-stu-id="84d7f-151">Gets or sets the element with the specified key.</span></span></summary>
        <value><span data-ttu-id="84d7f-152">带有指定键的元素。</span><span class="sxs-lookup"><span data-stu-id="84d7f-152">The element with the specified key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84d7f-153">此属性，可以通过使用以下语法访问集合中的特定元素： `myCollection[key]` (`myCollection(key)`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="84d7f-153">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]` (`myCollection(key)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="84d7f-154">此外可以使用<xref:System.Collections.Generic.IDictionary%602.Item%2A>属性来添加新元素不存在的键的值设置在字典中; 例如， `myCollection["myNonexistentKey"] = myValue` C# 中 (`myCollection("myNonexistentKey") = myValue`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="84d7f-154">You can also use the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue` in C# (`myCollection("myNonexistentKey") = myValue` in Visual Basic).</span></span> <span data-ttu-id="84d7f-155">但是，如果在字典中已存在指定的键，则将设置<xref:System.Collections.Generic.IDictionary%602.Item%2A>属性将会覆盖旧值。</span><span class="sxs-lookup"><span data-stu-id="84d7f-155">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="84d7f-156">与此相反，<xref:System.Collections.Generic.IDictionary%602.Add%2A>方法不会修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="84d7f-156">In contrast, the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="84d7f-157">实现可能存在差异，如何确定相等性的对象;例如，<xref:System.Collections.Generic.List%601>类使用<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>，而<xref:System.Collections.Generic.Dictionary%602>类允许用户指定<xref:System.Collections.Generic.IComparer%601>实现用于比较键。</span><span class="sxs-lookup"><span data-stu-id="84d7f-157">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
 <span data-ttu-id="84d7f-158">使用 C# 语言[这](~/docs/csharp/language-reference/keywords/this.md)关键字来定义而不是实现索引器<xref:System.Collections.Generic.IDictionary%602.Item%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="84d7f-158">The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property.</span></span> <span data-ttu-id="84d7f-159">Visual Basic 将 <xref:System.Collections.Generic.IDictionary%602.Item%2A> 实现为默认属性，该属性提供相同的索引功能。</span><span class="sxs-lookup"><span data-stu-id="84d7f-159">Visual Basic implements <xref:System.Collections.Generic.IDictionary%602.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="84d7f-160">实现可以改变是否允许`key`为`null`。</span><span class="sxs-lookup"><span data-stu-id="84d7f-160">Implementations can vary in whether they allow `key` to be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84d7f-161">下面的代码示例使用<xref:System.Collections.Generic.IDictionary%602.Item%2A>属性 （C# 中的索引器） 来检索值，从而演示<xref:System.Collections.Generic.KeyNotFoundException>请求的键不存在，以及可以替换与某个键相关联的值时引发。</span><span class="sxs-lookup"><span data-stu-id="84d7f-161">The following code example uses the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</span></span>  
  
 <span data-ttu-id="84d7f-162">该示例还演示如何使用<xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A>方法作为更高效的方法来检索值，如果程序必须经常尝试在字典中不。</span><span class="sxs-lookup"><span data-stu-id="84d7f-162">The example also shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary.</span></span>  
  
 <span data-ttu-id="84d7f-163">此代码是一个更大的示例可以编译和执行的一部分。</span><span class="sxs-lookup"><span data-stu-id="84d7f-163">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="84d7f-164">请参阅 <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="84d7f-164">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#3](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#3)]
 [!code-csharp[Generic.IDictionary#3](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#3)]
 [!code-vb[Generic.IDictionary#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#3)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
[!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
[!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
[!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="84d7f-165"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="84d7f-165"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="84d7f-166">检索了属性但没有找到 <paramref name="key" />。</span><span class="sxs-lookup"><span data-stu-id="84d7f-166">The property is retrieved and <paramref name="key" /> is not found.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="84d7f-167">设置了该属性，但 <see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读。</span><span class="sxs-lookup"><span data-stu-id="84d7f-167">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />
        <altmember cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;TKey&gt; Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TKey&gt; Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As ICollection(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;TKey&gt; ^ Keys { System::Collections::Generic::ICollection&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.Generic.ICollection&lt;'Key&gt;" Usage="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84d7f-168">获取包含 <see cref="T:System.Collections.Generic.ICollection`1" /> 的键的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="84d7f-168">Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <value><span data-ttu-id="84d7f-169">一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象的键。</span><span class="sxs-lookup"><span data-stu-id="84d7f-169">An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84d7f-170">在返回键的顺序<xref:System.Collections.Generic.ICollection%601>未指定，但它保证是中的对应值的顺序相同<xref:System.Collections.Generic.ICollection%601>返回的<xref:System.Collections.Generic.IDictionary%602.Values%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="84d7f-170">The order of the keys in the returned <xref:System.Collections.Generic.ICollection%601> is unspecified, but it is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.Generic.ICollection%601> returned by the <xref:System.Collections.Generic.IDictionary%602.Values%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84d7f-171">下面的代码示例演示如何枚举密钥单独使用<xref:System.Collections.Generic.IDictionary%602.Keys%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="84d7f-171">The following code example shows how to enumerate keys alone using the <xref:System.Collections.Generic.IDictionary%602.Keys%2A> property.</span></span>  
  
 <span data-ttu-id="84d7f-172">此代码是一个更大的示例可以编译和执行的一部分。</span><span class="sxs-lookup"><span data-stu-id="84d7f-172">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="84d7f-173">请参阅 <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="84d7f-173">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#9](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#9)]
 [!code-csharp[Generic.IDictionary#9](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#9)]
 [!code-vb[Generic.IDictionary#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'Key -&gt; bool" Usage="iDictionary.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="84d7f-174">要移除的元素的键。</span><span class="sxs-lookup"><span data-stu-id="84d7f-174">The key of the element to remove.</span></span></param>
        <summary><span data-ttu-id="84d7f-175">从 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中移除包含指定键的元素。</span><span class="sxs-lookup"><span data-stu-id="84d7f-175">Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <returns><span data-ttu-id="84d7f-176">如果该元素已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84d7f-176"><see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="84d7f-177">如果在原始 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中没有找到 <paramref name="key" />，此方法也会返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84d7f-177">This method also returns <see langword="false" /> if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84d7f-178">实现可能存在差异，如何确定相等性的对象;例如，<xref:System.Collections.Generic.List%601>类使用<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>，而<xref:System.Collections.Generic.Dictionary%602>类允许用户指定<xref:System.Collections.Generic.IComparer%601>实现用于比较键。</span><span class="sxs-lookup"><span data-stu-id="84d7f-178">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84d7f-179">下面的代码示例演示如何移除键/值对字典使用<xref:System.Collections.Generic.IDictionary%602.Remove%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="84d7f-179">The following code example shows how to remove a key/value pair from a dictionary using the <xref:System.Collections.Generic.IDictionary%602.Remove%2A> method.</span></span>  
  
 <span data-ttu-id="84d7f-180">此代码是一个更大的示例可以编译和执行的一部分。</span><span class="sxs-lookup"><span data-stu-id="84d7f-180">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="84d7f-181">请参阅 <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="84d7f-181">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#10](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#10)]
 [!code-csharp[Generic.IDictionary#10](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#10)]
 [!code-vb[Generic.IDictionary#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="84d7f-182"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="84d7f-182"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="84d7f-183"><see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读。</span><span class="sxs-lookup"><span data-stu-id="84d7f-183">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(!TKey key, [out] !TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : 'Key *  -&gt; bool" Usage="iDictionary.TryGetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="84d7f-184">要获取其值的键。</span><span class="sxs-lookup"><span data-stu-id="84d7f-184">The key whose value to get.</span></span></param>
        <param name="value"><span data-ttu-id="84d7f-185">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 <paramref name="value" /> 参数的类型的默认值。</span><span class="sxs-lookup"><span data-stu-id="84d7f-185">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter.</span></span> <span data-ttu-id="84d7f-186">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="84d7f-186">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="84d7f-187">获取与指定键关联的值。</span><span class="sxs-lookup"><span data-stu-id="84d7f-187">Gets the value associated with the specified key.</span></span></summary>
        <returns><span data-ttu-id="84d7f-188">如果实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象包含具有指定键的元素，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84d7f-188"><see langword="true" /> if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84d7f-189">此方法将的功能组合<xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A>方法和<xref:System.Collections.Generic.IDictionary%602.Item%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="84d7f-189">This method combines the functionality of the <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> method and the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property.</span></span>  
  
 <span data-ttu-id="84d7f-190">如果未找到键，则 `value` 参数将为类型 `TValue` 获取适当的默认值；例如，为整数类型获取零 (0)，为布尔值类型获取 `false`，为引用类型获取 `null`。</span><span class="sxs-lookup"><span data-stu-id="84d7f-190">If the key is not found, then the `value` parameter gets the appropriate default value for the type `TValue`; for example, zero (0) for integer types, `false` for Boolean types, and `null` for reference types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84d7f-191">该示例演示如何使用<xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A>方法来检索值。</span><span class="sxs-lookup"><span data-stu-id="84d7f-191">The example shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method to retrieve values.</span></span> <span data-ttu-id="84d7f-192">如果程序频繁尝试不在字典中的键值<xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A>方法可以是比使用更高效<xref:System.Collections.Generic.IDictionary%602.Item%2A>属性 （索引器在 C# 中），后者在尝试检索不存在的键时引发异常。</span><span class="sxs-lookup"><span data-stu-id="84d7f-192">If a program frequently tries key values that are not in a dictionary, the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method can be more efficient than using the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#), which throws exceptions when attempting to retrieve nonexistent keys.</span></span>  
  
 <span data-ttu-id="84d7f-193">此代码是一个更大的示例可以编译和执行的一部分。</span><span class="sxs-lookup"><span data-stu-id="84d7f-193">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="84d7f-194">请参阅 <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="84d7f-194">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
 [!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
 [!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="84d7f-195"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="84d7f-195"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
        <altmember cref="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;TValue&gt; Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TValue&gt; Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As ICollection(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;TValue&gt; ^ Values { System::Collections::Generic::ICollection&lt;TValue&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.Generic.ICollection&lt;'Value&gt;" Usage="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84d7f-196">获取一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</span><span class="sxs-lookup"><span data-stu-id="84d7f-196">Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <value><span data-ttu-id="84d7f-197">一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象中的值。</span><span class="sxs-lookup"><span data-stu-id="84d7f-197">An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84d7f-198">在返回值的顺序<xref:System.Collections.Generic.ICollection%601>未指定，但它保证是中的对应键的顺序相同<xref:System.Collections.Generic.ICollection%601>返回的<xref:System.Collections.Generic.IDictionary%602.Keys%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="84d7f-198">The order of the values in the returned <xref:System.Collections.Generic.ICollection%601> is unspecified, but it is guaranteed to be the same order as the corresponding keys in the <xref:System.Collections.Generic.ICollection%601> returned by the <xref:System.Collections.Generic.IDictionary%602.Keys%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84d7f-199">下面的代码示例说明如何枚举值单独使用<xref:System.Collections.Generic.IDictionary%602.Values%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="84d7f-199">The following code example shows how to enumerate values alone using the <xref:System.Collections.Generic.IDictionary%602.Values%2A> property.</span></span>  
  
 <span data-ttu-id="84d7f-200">此代码是一个更大的示例可以编译和执行的一部分。</span><span class="sxs-lookup"><span data-stu-id="84d7f-200">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="84d7f-201">请参阅 <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="84d7f-201">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#8](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#8)]
 [!code-csharp[Generic.IDictionary#8](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#8)]
 [!code-vb[Generic.IDictionary#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
      </Docs>
    </Member>
  </Members>
</Type>